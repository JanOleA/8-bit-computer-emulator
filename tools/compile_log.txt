

 ------ Assembling snippet: addsq64 ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20000
add_square64:
  LDA .__arg1
  STA .bss           
  LDA .__arg1
  STA .bss + 1       
  LDI 0
  STA .bss + 2       
  STA .bss + 3       
  STA .bss + 6       
asq_loop:
  LDA .bss + 1
  CPI 0
  JPZ asq_add_to_sum
  RSA
  STA .bss + 7
  JPC asq_odd
asq_store_mul:
  LDA .bss + 7
  STA .bss + 1
  LDA .bss + 6
  LSA
  STA .bss + 6
  LDA .bss
  LSA
  STA .bss
  JPC asq_set_hi_bit
  JMP asq_shift_done
asq_odd:
  LDA .bss + 2
  ADD .bss
  STA .bss + 2
  JPC asq_carry_lo
  JMP asq_add_hi_only
asq_carry_lo:
  LDA .bss + 3
  ADI 1
  STA .bss + 3
asq_add_hi_only:
  LDA .bss + 3
  ADD .bss + 6
  STA .bss + 3
  JMP asq_store_mul
asq_set_hi_bit:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
asq_shift_done:
  JMP asq_loop
asq_add_to_sum:
  LPA .__arg2                
  STA .bss + 4
  LPA .__res1                
  STA .bss + 5
  LDA .bss + 4
  ADD .bss + 2
  STA .bss + 4
  JPC asq_inc_hi
  JMP asq_add_hi
asq_inc_hi:
  LDA .bss + 3
  ADI 1
  STA .bss + 3
asq_add_hi:
  LDA .bss + 5
  ADD .bss + 3
  STA .bss + 5
  LDA .__arg2
  PHA
  LDA .bss + 4
  SAS
  LDA .__res1
  PHA
  LDA .bss + 5
  SAS
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: asteroids ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20008
score_text = 25008
game_over_text = 25016
asteroid_symbol = 25046
turret_symbol = 25048
bullet_symbol = 25050
repeat_delay = 64       
repeat_shift = 4        
.score_text = "SCORE: "
.game_over_text = "Game over! Your final score: "
.asteroid_symbol = "O"
.turret_symbol = "A"
.bullet_symbol = "|"
screen_width_sub1 = bss + 12
main:
  LDA .__sys_screen_width
  SUI 1
  STA .screen_width_sub1
  DIS 8                 
  JSR #0
  JSR clear_display
  LDA .screen_width_sub1
  PHA
  JSR #0
  STA .bss              
  LDI 1
  STA .bss + 3          
  LDI 0
  STA .bss + 9          
new_asteroid:
  LDA .screen_width_sub1
  PHA
  JSR #0
  STA .bss + 1          
  LDI 0
  STA .bss + 2          
game_loop:
  LDI 0
  STA .bss + 6          
  JSR update_display
  JSR wait_3200
  LDA .bss + 9
  CPI 50
  JPC skip_waits
  JSR update_display
  JSR wait_3200
  LDA .bss + 9
  CPI 25
  JPC skip_waits
  JSR update_display
  JSR wait_3200
  LDA .bss + 9
  CPI 10
  JPC skip_waits
  JSR update_display
  JSR wait_3200
skip_waits:
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  CMP .__sys_screen_height
  JPC end
  LDA .bss + 6        
  CPI 0
  JPZ game_loop 
  JSR update_display
  JSR wait_3200
  LDA .bss + 5
  CMP .bss + 1
  JPZ hit
  JMP game_loop
hit:
  LDA .bss + 9
  ADI 1
  STA .bss + 9
  JMP new_asteroid
update_display:
  JSR clear_display
  LDI .score_text
  JSR print_z
  LDA .bss + 9
  JSR #0
  JSR #0
  LDI 1
  STA .bss + 3
screen_loop:
  LDA .bss + 3                  
  CMP .bss + 2
  JPZ write_asteroid_wrapper
  JSR write_bullet
  JSR #0
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  CMP .__sys_screen_height
  JPC write_turret_wrapper
  JMP screen_loop
write_turret_wrapper:
  JSR write_turret
  RET
write_bullet:
  LDA .bss + 6
  CPI 0
  JPZ ret_immediate         
  LDA .bss + 2
  ADI 1
  CMP .bss + 3
  JPZ ret_immediate         
  LDA .bss + 5
  CMP .bss + 1
  JPZ test_bullet_y
  JMP begin_write_bullet
test_bullet_y:
  LDA .bss + 2
  CMP .bss + 3
  JPC ret_immediate
begin_write_bullet:
  LDA .bss + 5              
  STA .bss + 4
write_bullet_loop:
  LDA .bss + 5
  CPI 0
  JPZ write_bullet_end
  JSR advance_cursor
  LDA .bss + 5
  SUI 1
  STA .bss + 5
  JMP write_bullet_loop
write_bullet_end:
  LDA .bullet_symbol
  JSR #0
  LDA .bss + 4
  STA .bss + 5              
ret_immediate:
  RET
write_asteroid_wrapper:
  JSR write_asteroid
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  JMP screen_loop
write_asteroid:
  LDI 0
  STA .bss + 4              
write_asteroid_loop:
  LDA .bss + 1
  CMP .bss + 4
  JPZ write_asteroid_character
  JMP check_bullet
write_asteroid_character:
  LDA .asteroid_symbol
  JSR #0
  JMP skip_advance
check_bullet:
  LDA .bss + 6
  CPI 0                     
  JPZ advance_asteroid_line 
  LDA .bss + 5
  CMP .bss + 4
  JPZ write_bullet_character
  JMP advance_asteroid_line
write_bullet_character:
  LDA .bullet_symbol
  JSR #0
  JMP skip_advance
advance_asteroid_line:
  JSR advance_cursor
skip_advance:
  LDA .bss + 4
  CMP .screen_width_sub1
  JPC write_asteroid_end
  ADI 1
  STA .bss + 4
  JMP write_asteroid_loop
write_asteroid_end:
  RET
write_turret:
  LDA .bss                  
  STA .bss + 4
write_turret_loop:
  LDA .bss
  CPI 0
  JPZ write_turret_end
  JSR advance_cursor
  LDA .bss
  SUI 1
  STA .bss
  JMP write_turret_loop
write_turret_end:
  LDA .turret_symbol
  JSR #0
  LDA .bss + 4
  STA .bss                  
  RET
wait_3200:
  JSR wait_1600
  JSR wait_1600
  RET
wait_1600:
  JSR wait_800
  JSR wait_800
  RET
wait_800:
  JSR wait_400
  JSR wait_400
  RET
wait_400:
  JSR wait_200
  JSR wait_200
  RET
wait_200:
  JSR wait_100
  JSR wait_100
  RET
wait_100:
  JSR check_input
  LDA .bss + 7
  CPI 0
  JPZ set_no_input
  LDA .bss + 8
  CMP .bss + 10
  JPZ same_key_held
  LDA .bss + 8
  STA .bss + 10       
  LDI 0
  STA .bss + 11       
  LDI 0
  STA .__no_input       
  JMP after_repeat_gate
same_key_held:
  LDA .bss + 11
  ADI 1
  STA .bss + 11       
  CPI .repeat_delay
  JPC chk_rate        
  JMP after_repeat_gate
chk_rate:
  LDA .bss + 11
  STA .__work3
  LDA .__work3
  STA .__work1
  LDI .repeat_shift
  STA .__work2
crs_loop:
  LDA .__work2
  CPI 0
  JPZ cls_prep
  LDA .__work1
  RSA
  STA .__work1
  LDA .__work2
  SUI 1
  STA .__work2
  JMP crs_loop
cls_prep:
  LDI .repeat_shift
  STA .__work2
cls_loop:
  LDA .__work2
  CPI 0
  JPZ chk_cmp
  LDA .__work1
  LSA
  STA .__work1
  LDA .__work2
  SUI 1
  STA .__work2
  JMP cls_loop
chk_cmp:
  LDA .__work1
  CMP .__work3
  JPZ allow_repeat
  JMP after_repeat_gate
allow_repeat:
  LDI 0
  STA .__no_input
after_repeat_gate:
  LDA .__no_input
  CPI 1
  JPZ after_input_handling
  LDI 1
  STA .__no_input
  LDA .bss + 8
  CPI 52
  JPZ handle_left
  CPI 54
  JPZ handle_right
  CPI 47
  JPZ handle_shoot
  CPI 48
  JPZ handle_shoot
  CPI 49
  JPZ handle_shoot
after_input_handling:
  JSR #0
  RET
handle_shoot:
  LDA .bss + 6
  CPI 1
  JPZ after_input_handling    
  LDI 1
  STA .bss + 6
  LDA .bss
  STA .bss + 5
  JMP after_input_handling
handle_left:
  LDA .bss
  CPI 0
  JPZ after_input_handling    
  SUI 1
  STA .bss
  JMP after_input_handling
handle_right:
  LDA .bss
  CMP .screen_width_sub1
  JPZ after_input_handling    
  ADI 1
  STA .bss
  JMP after_input_handling
check_input:
  KEI
  PHA
  CPI 128
  JPC input_entered     
  PLA
  LDI 0
  STA .bss + 7
  RET
input_entered:
  PLA
  SUI 128
  STA .bss + 8
  LDI 1
  STA .bss + 7
  RET
set_no_input:
  LDI 0
  STA .__no_input
  LDI 0
  STA .bss + 10
  STA .bss + 11
  JMP after_input_handling
advance_cursor:
  LDI 32
  JSR #0
  RET
end:
  DIS 6             
  JSR #0 
  DIS 15            
  JSR #0
  JSR #0
  LDI .game_over_text
  PHA
  JSR #0
  LDA .bss + 9
  JSR #0
  JSR #0
  RET
clear_display:
  DIS 1             
  JSR #0
  RET
print_z:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
pz_done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: bufftosep ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20020
buffer      = .bss + 0      
buffer_pad  = .bss + 160    
end_on_null = .bss + 161    
write_ptr   = .bss + 162    
counter     = .bss + 163    
tmp_char    = .bss + 164    
sep_char    = .bss + 165    
read_ptr    = .bss + 166    
return_addr = .bss + 167    
buffer_to_separator:  
  LDI 0
  STA .end_on_null
  STA .buffer_pad
  STA .counter
  LDI .buffer            
  STA .write_ptr
get_args:
  PLA                
  STA .return_addr   
  PLA                
  STA .sep_char      
  PLA                
  STA .read_ptr      
buf_loop:
  LPA .read_ptr               
  CMP .sep_char               
  JPZ buf_end                 
  CPI 0
  JPZ buf_end_null            
  STA .tmp_char               
  LDA .write_ptr              
  PHA                         
  LDA .tmp_char               
  SAS                         
  LDA .counter
  ADI 1                       
  STA .counter
  CPI 160
  JPZ buf_end
  LDA .write_ptr
  ADI 1                       
  STA .write_ptr
  LDA .read_ptr
  ADI 1                       
  STA .read_ptr
  JMP buf_loop
buf_end_null:
  LDI 1
  STA .end_on_null
buf_end:
  LDA .end_on_null
  PHA
  LDA .counter
  PHA
  LDI .buffer                 
  PHA
  ADD .counter
  PHA
  LDI 0                       
  SAS
  LDA .return_addr
  PHA
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: calc ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
residual_text = 25072
distance_text = 25082
.residual_text = "Residual="
.distance_text = "Distance to next square="
calc:
  LDA .__argv_base
  CPI 2
  JPC cl_go
  RET
cl_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .__work1
  LDA .__argv_base + 2
  STA .__work2          
  LPA .__work2                
  STA .__char
  LDA .__argv_base
  CPI 3
  JPZ get_second_num
  LDA .__char
  JMP check_sqrt        
get_second_num:
  LDA .__argv_base + 3
  PHA
  JSR #0
  STA .__work2
  LDA .__char
  CPI 43              
  JPZ do_add
  CPI 45              
  JPZ do_sub
  CPI 42              
  JPZ do_mul
  CPI 47              
  JPZ do_div
  CPI 80              
  JPZ do_pow
check_sqrt:
  CPI 83              
  JPZ do_sqrt
  RET
do_add:
  LDA .__work1
  ADD .__work2
  JMP do_print
do_sub:
  LDA .__work1
  SUB .__work2
  JMP do_print_signed
do_sqrt:
  LDA .__work1
  PHA
  JSR #0
  PLA           
  STA .__work3
  PLA           
  STA .__work4
  PLA           
  JSR #0
  JSR #0
  LDI .residual_text
  JSR print_no_newline
  LDA .__work4
  JSR #0
  JSR #0
  LDI .distance_text
  JSR print_no_newline
  LDA .__work3
  JSR #0
  JSR #0
  RET
do_pow:
  LDA .__work1
  PHA
  LDA .__work2
  PHA
  JSR #0
  JMP do_print
do_mul:
  LDA .__work1
  PHA
  LDA .__work2
  PHA
  JSR #0
  JMP do_print
do_div:
  LDA .__work1
  STA .__arg1
  LDA .__work2
  STA .__arg2
  JSR #0
  STA .__work4          
  LDA .__res2
  STA .__work3          
  LDA .__work4          
  JSR #0
  LDI 32
  JSR #0
  LDI 82              
  JSR #0
  LDI 32
  JSR #0
  LDA .__work3
  JSR #0
  JSR #0
  RET
do_print:
  JSR #0
  JSR #0
  RET
do_print_signed:
  JSR #0
  JSR #0
  RET
print_newline:
  PHA
  JSR #0
  RET
print_no_newline:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: cat ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__argv_base = 2400
__argv_buf = 2500
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20188
escape_mode = bss + 0           
chars_printed = bss + 1         
total_chars_printed = bss + 2   
newlines_printed = bss + 3      
max_lines = bss + 4             
truncate_lines = bss + 5        
cat:
  LDI 0
  STA .escape_mode
  STA .chars_printed
  STA .total_chars_printed
  LDI 1
  STA .newlines_printed          
  LDA .__argv_base
  CPI 0
  JPZ print_init
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .__arg1
  LDI 0
  STA .__arg2
  STA .__res1
print_init:
  LDA .__res1
  STA .truncate_lines
  LDA .__arg2
  STA .max_lines
print_loop:
  LPA .__arg1                
  STA .__char
  CPI 0
  JPZ end
  LDA .escape_mode              
  CPI 1
  JPZ escape_char
  LDA .__char
  CPI 92
  JPZ set_escape
  LDA .__char
  CPI 10                
  JPZ escape_newline
  JSR write_char_wrapper
  JMP advance
set_escape:
  LDI 1
  STA .escape_mode
  JMP advance
escape_char:            
  LDI 0
  STA .escape_mode              
  LDA .__char
  CPI 92                
  JPZ escape_backslash
  CPI 78                
  JPZ escape_newline
escape_backslash:           
  JSR write_char_wrapper
  JMP advance
escape_newline:
  LDI 0
  STA .chars_printed
  LDA .newlines_printed
  ADI 1                 
  STA .newlines_printed
  CMP .max_lines
  JPC check_max_lines
  JMP pass_check_max_lines
check_max_lines:
  LDA .max_lines
  CPI 0
  JPZ pass_check_max_lines
  JMP end
pass_check_max_lines:
  JSR #0
advance:                
  LDA .__arg1
  ADI 1
  STA .__arg1
  LDA .chars_printed
  CMP .__sys_screen_width     
  JPC wrap_or_truncate
  JMP print_loop        
wrap_or_truncate:
  LDA .truncate_lines
  CPI 1
  JPZ truncate
  JMP newline_helper
truncate:
  JSR #0
  LDA .__res1
  ADD .total_chars_printed
  STA .total_chars_printed
  LDA .__arg1
  SUI 1                       
  STA .__arg1
  JMP escape_newline
newline_helper:         
  LDI 0
  STA .chars_printed
  JSR #0
  JMP print_loop
write_char_wrapper:     
  JSR #0
  LDA .chars_printed
  ADI 1
  STA .chars_printed
  LDA .total_chars_printed
  ADI 1
  STA .total_chars_printed
  RET
end:
  LDA .total_chars_printed
  STA .__res1
  LDA .newlines_printed
  STA .__res2
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: cls ------

--- Assembling ---

main:
  DIS 1      
  DIC 0
  DIC 128    
  DIC 0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: compareget ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20190
separator = 25136
.separator = ","
compare_get:
  PLA                
  MOVAB              
  PLA                 
  STA .bss + 1
  PLA                 
  STA .bss
  MOVBA              
  PHA                
compare:
  JSR buf_to_sep
  LDA .__res1
  PHA                     
  LDA .bss
  PHA                     
  JSR #0
  CPI 1
  JPZ match
  LPA .bss + 1                
  CPI 0                   
  JPZ end_no_match
  JMP compare
match:
  JSR buf_to_sep          
  LDA .__res1
  PHA
  JSR #0
  STA .__res1               
  RET
end_no_match:
  LDI 0
  STA .__res1
  RET
buf_to_sep:          
  LDA .bss + 1                  
  PHA                           
  LDA .separator                
  PHA
  JSR #0
  PLA                           
  STA .__res1                     
  PLA                           
  STA .__res2                     
  PLA                           
  STA .__res3                     
  LDA .__res2
  CPI 0                         
  JPZ bts_done                  
  LDA .bss + 1
  ADD .__res2                     
  STA .bss + 1
  LPA .bss + 1                  
  CMP .separator
  JPZ bts_skip_sep
  JMP bts_done
bts_skip_sep:
  LDA .bss + 1
  ADI 1
  STA .bss + 1
bts_done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: compile ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20192
success_prefix = 25168
success_suffix = 25178
err_prefix = 25185
err_line = 25191
err_suffix = 25199
err_const_table = 25201
err_const_names = 25218
err_const_dup = 25235
err_const_missing_name = 25253
err_const_missing_val = 25272
err_const_value = 25292
err_label_table = 25312
err_label_names = 25329
err_label_dup = 25346
err_unknown_cmd = 25364
err_missing_operand = 25380
err_const_unknown = 25396
err_label_unknown = 25410
err_abi_unknown = 25424
err_prog_unknown = 25440
err_number = 25456
err_token_long = 25471
err_len_mismatch = 25486
dbg_start = 25502
dbg_mid = 25515
dbg_pass1 = 25521
dbg_consts = 25534
dbg_labels = 25543
dbg_pass2 = 25552
compile_start:
  LDA .__argv_base
  CPI 1
  JPC parse_arg
  JMP compile_init
parse_arg:
  LDA .__argv_base + 1
  STA .bss + 0          
  LDA .__argv_base
  CPI 2
  JPC parse_arg_2
  JMP parse_finish
parse_arg_2:
  LDA .__argv_base + 2
  PHA
  JSR #0
  STA .bss + 1          
parse_finish:
  LDA .bss + 0          
  PHA
  JSR #0
  STA .__arg1
  LDA .bss + 1
  STA .__arg2             
compile_init:
  LDA .__arg1
  STA .bss + 0
  LDA .__arg2
  STA .bss + 1          
  JMP compile_main   
print_newline:
  PHA
  JSR #0
  RET
print_no_newline:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET
.success_prefix = "Compiled "
.success_suffix = " words"
.err_prefix = "ERR: "
.err_line = " (line "
.err_suffix = ")"
.err_const_table = "Const table full"
.err_const_names = "Const names full"
.err_const_dup = "Const already set"
.err_const_missing_name = "Const missing name"
.err_const_missing_val = "Const missing value"
.err_const_value = "Const value invalid"
.err_label_table = "Label table full"
.err_label_names = "Label names full"
.err_label_dup = "Label already set"
.err_unknown_cmd = "Unknown command"
.err_missing_operand = "Missing operand"
.err_const_unknown = "Unknown const"
.err_label_unknown = "Unknown label"
.err_abi_unknown = "Unknown abi var"
.err_prog_unknown = "Unknown program"
.err_number = "Invalid number"
.err_token_long = "Token too long"
.err_len_mismatch = "Length mismatch"
.dbg_start = "Compile src="
.dbg_mid = " dst="
.dbg_pass1 = "Pass1 words="
.dbg_consts = " consts="
.dbg_labels = " labels="
.dbg_pass2 = "Pass2 emit"
compile_main:
  LDI .dbg_start
  JSR print_no_newline
  LDA .bss + 0
  JSR #0
  LDI .dbg_mid
  JSR print_no_newline
  LDA .bss + 1
  JSR #0
  JSR #0
  LDI 0
  STA .bss + 13
  JSR compile_pass1
  LDI .dbg_pass1
  JSR print_no_newline
  LDA .bss + 4
  JSR #0
  LDI .dbg_consts
  JSR print_no_newline
  LDA .bss + 5
  JSR #0
  LDI .dbg_labels
  JSR print_no_newline
  LDA .bss + 6
  JSR #0
  JSR #0
  LDA .bss + 13
  CPI 0
  JPZ cm_run_pass2
  RET
cm_run_pass2:
  LDI .dbg_pass2
  JSR print_newline
  JSR compile_pass2
  LDA .bss + 13
  CPI 0
  JPZ cm_success
  RET
cm_success:
  LDA .bss + 1
  STA .__res1
  LDA .bss + 4
  STA .__res2
  LDI .success_prefix
  JSR print_no_newline
  LDA .bss + 4
  JSR #0
  LDI .success_suffix
  JSR print_newline
  RET
compile_pass1:
  LDA .bss + 0
  STA .bss + 2
  LDI 0
  STA .bss + 4
  STA .bss + 5
  STA .bss + 6
  STA .bss + 13
  LDI .bss + 32
  STA .bss + 9
  LDI .bss + 352
  STA .bss + 10
  LDI .bss + 96
  STA .bss + 7
  LDI .bss + 480
  STA .bss + 8
  LDI 1
  STA .bss + 14
cp1_loop:
  LDA .bss + 13
  CPI 0
  JPZ cp1_check_end
  RET
cp1_check_end:
  LPA .bss + 2                
  CPI 0
  JPZ cp1_done
  LDA .bss + 2
  STA .__work1
  LDA .bss + 2
  STA .__arg1
  JSR #0
  LDA .__arg1
  STA .bss + 2
  LDA .__res1
  STA .__work2
  LDA .__work1
  STA .__work3
  LDA .__work2
  STA .__work4
  LDA .__work3
  ADD .__work4
  STA .__work3
  JSR next_token
  LDA .__res1
  CPI 1
  JPZ cp1_got_token
  JMP cp1_next_line
cp1_got_token:
  LPA .bss + 11                
  STA .__char
  CPI 73
  JPZ cp1_maybe_const
  CPI 45
  JPZ cp1_store_label
  JMP cp1_instruction
cp1_maybe_const:
  LDA .bss + 12
  CPI 1
  JPZ cp1_handle_const
  JMP cp1_instruction
cp1_handle_const:
  JSR next_token
  LDA .__res1
  CPI 1
  JPZ cp1_const_name
  LDI .err_const_missing_name
  JSR report_error
  JMP cp1_next_line
cp1_const_name:
  LDA .__work1
  STA .bss + 16
  LDA .__work3
  STA .bss + 17
  JSR alloc_const_entry
  LDA .bss + 16
  STA .__work1
  LDA .bss + 17
  STA .__work3
  LDA .__res2
  CPI 1
  JPZ cp1_const_have_entry
  JMP cp1_next_line
cp1_const_have_entry:
  LDA .__res1
  STA .__work4
  STA .bss + 18
  JSR next_token
  LDA .__res1
  CPI 1
  JPZ cp1_const_value_token
  LDI .err_const_missing_val
  JSR report_error
  JMP cp1_next_line
cp1_const_value_token:
  LDA .bss + 18
  STA .__work4
  LDA .bss + 11
  STA .__work2
  PHA
  JSR #0
  STA .__work3
  JMP cp1_store_const_value
  LDA .__work2      
  MOVAB
  LDA .bss + 12   
  SUM
  STA .__pow2       
  LDA .__arg1       
  CMP .__pow2
  JPZ cp1_store_const_value
  LDI .err_const_value
  JSR report_error
  JMP cp1_next_line
cp1_store_const_value:
  LDA .__work4
  PHA
  LDA .__work3
  SAS
  JMP cp1_next_line
cp1_store_label:
  LDA .__work1
  STA .bss + 16
  LDA .__work3
  STA .bss + 17
  JSR store_label_entry
  LDA .bss + 16
  STA .__work1
  LDA .bss + 17
  STA .__work3
  JMP cp1_next_line
cp1_instruction:
  LDA .bss + 4
  ADI 1
  STA .bss + 4
  JSR next_token
  LDA .__res1
  CPI 1
  JPZ cp1_has_operand
  JMP cp1_next_line
cp1_has_operand:
  LDA .bss + 4
  ADI 1
  STA .bss + 4
  LDA .__work3
  STA .__work1
  JMP cp1_next_line
cp1_next_line:
  LDA .bss + 14
  ADI 1
  STA .bss + 14
  JMP cp1_loop
cp1_done:
  RET
compile_pass2:
  LDA .bss + 1
  STA .bss + 3
  LDA .bss + 0
  STA .bss + 2
  LDI 1
  STA .bss + 14
cp2_loop:
  LDA .bss + 13
  CPI 0
  JPZ cp2_check_end
  RET
cp2_check_end:
  LPA .bss + 2                
  CPI 0
  JPZ cp2_after_loop
  LDA .bss + 2
  STA .__work1
  LDA .bss + 2
  STA .__arg1
  JSR #0
  LDA .__arg1
  STA .bss + 2
  LDA .__res1
  STA .__work2
  LDA .__work1
  STA .__work3
  LDA .__work2
  STA .__work4
  LDA .__work3
  ADD .__work4
  STA .__work3
  JSR next_token
  LDA .__res1
  CPI 1
  JPZ cp2_got_token
  JMP cp2_next_line
cp2_got_token:
  LPA .bss + 11                
  STA .__char
  CPI 73
  JPZ cp2_maybe_const
  CPI 45
  JPZ cp2_skip_line
  JMP cp2_instruction
cp2_maybe_const:
  LDA .bss + 12
  CPI 1
  JPZ cp2_skip_line
  JMP cp2_instruction
cp2_skip_line:
  LDA .__work3
  STA .__work1
  JMP cp2_next_line
cp2_instruction:
  LDA .bss + 11
  PHA
  JSR #0
  CPI 0
  JPZ cp2_unknown_cmd
  STA .__work4
  LDA .bss + 3
  PHA
  LDA .__work4
  SAS
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  JSR next_token
  LDA .__res1
  CPI 1
  JPZ cp2_operand
  JMP cp2_next_line
cp2_operand:
  JSR resolve_operand
  LDA .__res2
  CPI 1
  JPZ cp2_store_operand
  JMP cp2_next_line
cp2_store_operand:
  LDA .bss + 3
  PHA
  LDA .__res1
  SAS
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  JMP cp2_next_line
cp2_unknown_cmd:
  LDI .err_unknown_cmd
  JSR report_error
  JMP cp2_next_line
cp2_next_line:
  LDA .bss + 14
  ADI 1
  STA .bss + 14
  JMP cp2_loop
cp2_after_loop:
  LDA .bss + 1
  ADD .bss + 4
  STA .__work1
  LDA .bss + 3
  CMP .__work1
  JPZ cp2_done
  LDI .err_len_mismatch
  JSR report_error
cp2_done:
  RET
next_token:
  LDA .__work1
  CMP .__work3
  JPZ nt_none
nt_skip:
  LDA .__work1
  CMP .__work3
  JPZ nt_none
  LPA .__work1                
  STA .__char
  CPI 32
  JPZ nt_skip_ws
  CPI 9
  JPZ nt_skip_ws
  CPI 59
  JPZ nt_comment
  JMP nt_start
nt_skip_ws:
  LDA .__work1
  ADI 1
  STA .__work1
  JMP nt_skip
nt_comment:
  LDA .__work3
  STA .__work1
  JMP nt_none
nt_start:
  LDI .bss + 736
  STA .bss + 11
  LDI 0
  STA .bss + 12
  LDA .bss + 11
  STA .__work4
nt_copy:
  LDA .__work1
  CMP .__work3
  JPZ nt_finish
  LPA .__work1                
  STA .__char
  CPI 32
  JPZ nt_finish
  CPI 9
  JPZ nt_finish
  CPI 59
  JPZ nt_comment_finish
  LDA .bss + 12
  CPI 79
  JPZ nt_too_long
  LDA .__work4
  PHA
  LDA .__char
  SAS
  LDA .__work4
  ADI 1
  STA .__work4
  LDA .__work1
  ADI 1
  STA .__work1
  LDA .bss + 12
  ADI 1
  STA .bss + 12
  JMP nt_copy
nt_comment_finish:
  LDA .__work3
  STA .__work1
nt_finish:
  LDA .__work4
  PHA
  LDI 0
  SAS
  LDA .bss + 12
  CPI 0
  JPZ nt_none
  LDI 1
  STA .__res1
  RET
nt_too_long:
  LDI .err_token_long
  JSR report_error
  LDA .__work3
  STA .__work1
  JMP nt_finish
nt_none:
  LDI 0
  STA .__res1
  LDI 0
  STA .bss + 12
  RET
alloc_const_entry:
  LDA .bss + 11
  STA .__arg1
  JSR find_const
  LDA .__res2
  CPI 1
  JPZ ace_duplicate
  LDA .bss + 5
  CPI 32
  JPZ ace_full
  LDA .bss + 12
  ADI 1
  STA .__pow2
  LDA .bss + 7
  ADD .__pow2
  STA .__work3
  LDI .bss + 352
  STA .__work4
  LDA .__work3
  CMP .__work4
  JPZ ace_copy
  JPC ace_name_full
ace_copy:
  LDA .bss + 7
  STA .__work2
  JSR copy_token_buffer
  LDA .__res2
  STA .bss + 7
  LDA .__res1
  STA .__work2
  LDA .bss + 9
  PHA
  LDA .__work2
  SAS
  LDA .bss + 9
  ADI 1
  STA .bss + 9
  LDA .bss + 9
  STA .__work4
  ADI 1
  STA .bss + 9
  LDA .bss + 5
  ADI 1
  STA .bss + 5
  LDA .__work4
  STA .__res1
  LDI 1
  STA .__res2
  RET
ace_duplicate:
  LDI .err_const_dup
  JSR report_error
  LDI 0
  STA .__res2
  RET
ace_full:
  LDI .err_const_table
  JSR report_error
  LDI 0
  STA .__res2
  RET
ace_name_full:
  LDI .err_const_names
  JSR report_error
  LDI 0
  STA .__res2
  RET
store_label_entry:
  LDA .bss + 11
  STA .__arg1
  JSR find_label
  LDA .__res2
  CPI 1
  JPZ sle_duplicate
  LDA .bss + 6
  CPI 64
  JPZ sle_full
  LDA .bss + 12
  ADI 1
  STA .__pow2
  LDA .bss + 8
  ADD .__pow2
  STA .__work2
  LDI .bss + 736
  STA .__work3
  LDA .__work2
  CMP .__work3
  JPZ sle_copy
  JPC sle_name_full
sle_copy:
  LDA .bss + 8
  STA .__work2
  JSR copy_token_buffer
  LDA .__res2
  STA .bss + 8
  LDA .__res1
  STA .__work2
  LDA .bss + 1
  ADD .bss + 4
  STA .__work3
  LDA .bss + 10
  PHA
  LDA .__work2
  SAS
  LDA .bss + 10
  ADI 1
  STA .bss + 10
  LDA .bss + 10
  PHA
  LDA .__work3
  SAS
  LDA .bss + 10
  ADI 1
  STA .bss + 10
  LDA .bss + 6
  ADI 1
  STA .bss + 6
  RET
sle_duplicate:
  LDI .err_label_dup
  JSR report_error
  RET
sle_full:
  LDI .err_label_table
  JSR report_error
  RET
sle_name_full:
  LDI .err_label_names
  JSR report_error
  RET
copy_token_buffer:
  LDA .bss + 11
  STA .__work4
  LDA .__work2
  STA .__work1
ct_loop:
  LPA .__work4                
  STA .__char
  CPI 0
  JPZ ct_end
  LDA .__work1
  PHA
  LDA .__char
  SAS
  LDA .__work4
  ADI 1
  STA .__work4
  LDA .__work1
  ADI 1
  STA .__work1
  JMP ct_loop
ct_end:
  LDA .__work1
  PHA
  LDI 0
  SAS
  LDA .__work1
  ADI 1
  STA .__work1
  LDA .__work2
  STA .__res1
  LDA .__work1
  STA .__res2
  RET
find_const:
  LDA .__arg1
  STA .__work2
  LDA .bss + 5
  CPI 0
  JPZ fc_not_found
  LDI .bss + 32
  STA .__work1
  LDA .bss + 5
  STA .__work3
fc_loop:
  LDA .__work3
  CPI 0
  JPZ fc_not_found
  LPA .__work1                
  STA .__work4
  LDA .__work4
  PHA
  LDA .__work2
  PHA
  JSR #0
  CPI 1
  JPZ fc_match
  LDA .__work2
  STA .__arg1
  LDA .__work1
  ADI 2
  STA .__work1
  LDA .__work3
  SUI 1
  STA .__work3
  JNZ fc_loop
  JMP fc_not_found
fc_match:
  LDA .__work2
  STA .__arg1
  LDA .__work1
  ADI 1
  STA .__work4
  LPA .__work4                
  STA .__res1
  LDI 1
  STA .__res2
  RET
fc_not_found:
  LDA .__work2
  STA .__arg1
  LDI 0
  STA .__res1
  STA .__res2
  RET
find_label:
  LDA .__arg1
  STA .__work2
  LDA .bss + 6
  CPI 0
  JPZ fl_not_found
  LDI .bss + 352
  STA .__work1
  LDA .bss + 6
  STA .__work3
fl_loop:
  LDA .__work3
  CPI 0
  JPZ fl_not_found
  LPA .__work1                
  STA .__work4
  LDA .__work4
  PHA
  LDA .__work2
  PHA
  JSR #0
  CPI 1
  JPZ fl_match
  LDA .__work2
  STA .__arg1
  LDA .__work1
  ADI 2
  STA .__work1
  LDA .__work3
  SUI 1
  STA .__work3
  JNZ fl_loop
  JMP fl_not_found
fl_match:
  LDA .__work2
  STA .__arg1
  LDA .__work1
  ADI 1
  STA .__work4
  LPA .__work4                
  STA .__res1
  LDI 1
  STA .__res2
  RET
fl_not_found:
  LDA .__work2
  STA .__arg1
  LDI 0
  STA .__res1
  STA .__res2
  RET
resolve_operand:
  LDA .bss + 12
  CPI 0
  JPZ ro_missing
  LPA .bss + 11                
  STA .__char
  CPI 42
  JPZ ro_const
  CPI 46
  JPZ ro_abi
  CPI 45
  JPZ ro_label
  CPI 43
  JPZ ro_prog
  JMP ro_number
ro_const:
  LDA .bss + 12
  CPI 1
  JPZ ro_missing
  LDA .bss + 11
  ADI 1
  STA .__arg1
  JSR find_const
  LDA .__res2
  CPI 1
  JPZ ro_return
  LDI .err_const_unknown
  JSR report_error
  JMP ro_fail
ro_label:
  LDA .bss + 11
  STA .__arg1
  JSR find_label
  LDA .__res2
  CPI 1
  JPZ ro_return
  LDI .err_label_unknown
  JSR report_error
  JMP ro_fail
ro_abi:
  LDA .bss + 12
  CPI 1
  JPZ ro_missing
  LDA .bss + 11
  ADI 1
  PHA
  JSR #0
  CPI 0
  JPZ ro_abi_fail
  STA .__res1
  LDI 1
  STA .__res2
  RET
ro_abi_fail:
  LDI .err_abi_unknown
  JSR report_error
  JMP ro_fail
ro_prog:
  LDA .bss + 12
  CPI 1
  JPZ ro_missing
  LDA .bss + 11
  ADI 1
  STA .__arg1
  JSR #0
  CPI 0
  JPZ ro_prog_fail
  STA .__res1
  LDI 1
  STA .__res2
  RET
ro_prog_fail:
  LDI .err_prog_unknown
  JSR report_error
  JMP ro_fail
ro_number:
  LDA .bss + 11
  STA .__work2
  PHA
  JSR #0
  STA .__work4
  LDA .bss + 12
  STA .__pow2
  LDA .__work2
  ADD .__pow2
  STA .__pow2
  LDA .__arg1
  CMP .__pow2
  JPZ ro_num_ok
  LDI .err_number
  JSR report_error
  JMP ro_fail
ro_num_ok:
  LDA .__work4
  STA .__res1
  LDI 1
  STA .__res2
  RET
ro_return:
  LDI 1
  STA .__res2
  RET
ro_missing:
  LDI .err_missing_operand
  JSR report_error
ro_fail:
  LDI 0
  STA .__res1
  STA .__res2
  RET
report_error:
  STA .bss + 15
  LDA .bss + 13
  CPI 0
  JPZ re_first
  RET
re_first:
  LDI 1
  STA .bss + 13
  LDI .err_prefix
  JSR print_no_newline
  LDA .bss + 15
  JSR print_no_newline
  LDI .err_line
  JSR print_no_newline
  LDA .bss + 14
  JSR #0
  LDI .err_suffix
  JSR print_newline
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: cpymem ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20929
invalid_address = 25584
.invalid_address = "Invalid mem.addr. in cpymem: %u"
copy_mem:
  LDA .__argv_base
  CPI 3
  JPZ cl_go
  LDA .__arg1
  STA .bss
  LDA .__arg2
  STA .bss + 1
  LDA .__num_digits
  STA .bss + 2
  JMP cpy
cl_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .bss
  LDA .__argv_base + 2
  PHA
  JSR #0
  STA .bss + 1
  LDA .__argv_base + 3
  PHA
  JSR #0
  STA .bss + 2
cpy:
  LDA .bss + 2
  CPI 0
  JPZ cpy_ret
  LDA .bss
  ADD .bss + 2
  STA .__work1
  LDA .bss + 1
  CMP .bss
  JPC cpy_ge_src
  JMP cpy_forward
cpy_ge_src:
  LDA .bss + 1
  CMP .__work1
  JPC cpy_forward     
  JMP cpy_backward    
cpy_forward:
  LDA .bss
  STA .__work2            
  LDA .bss + 1
  STA .__work3            
  LDA .bss + 2
  STA .__work4            
cf_loop:
  LDA .__work4            
  CPI 0                   
  JPZ cpy_ret             
  LDA .__work3
  CMP .__sys_reserved_region_end         
  JPC cpy_forward_address_ok
  JMP cpy_invalid_address
cpy_forward_address_ok:
  PHA                     
  LDA .__work2
  PHA                     
  LAS                     
  SAS                     
  LDA .__work2
  ADI 1
  STA .__work2
  LDA .__work3
  ADI 1
  STA .__work3
  LDA .__work4
  SUI 1
  STA .__work4
  JMP cf_loop
cpy_backward:
  LDA .bss
  ADD .bss + 2
  SUI 1
  STA .__work2
  LDA .bss + 1
  ADD .bss + 2
  SUI 1
  STA .__work3
  LDA .bss + 2
  STA .__work4
cb_loop:
  LDA .__work4
  CPI 0
  JPZ cpy_ret
  LDA .__work3
  CMP .__sys_reserved_region_end         
  JPC cpy_backward_address_ok
  JMP cpy_invalid_address
cpy_backward_address_ok:
  PHA                         
  LDA .__work2
  PHA                         
  LAS                         
  SAS                         
  LDA .__work2
  SUI 1
  STA .__work2
  LDA .__work3
  SUI 1
  STA .__work3
  LDA .__work4
  SUI 1
  STA .__work4
  JMP cb_loop
cpy_invalid_address:
  LDI .invalid_address
  PHA
  LDI .__work3
  PHA
  JSR #0
cpy_ret:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: disphex ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20932
display_hex:
  STA .bss
  STA .bss + 2
  LDA .bss
  CPI 0
  JPZ dn_zero
  LDI 0
  STA .bss + 1
dn_loop:
  LDA .bss
  CPI 0
  JPZ dn_print
  LDA .bss
  STA .__arg1
  LDI 16
  STA .__arg2
  JSR #0
  STA .bss            
  LDA .__res2
  CPI 10
  JPC dn_hex_alpha    
  ADI 48              
  PHA                 
  JMP dn_pushed
dn_hex_alpha:
  SUI 10
  ADI 65              
  PHA
dn_pushed:
  LDA .bss + 1
  ADI 1
  STA .bss + 1
  JMP dn_loop
dn_print:
  LDA .bss + 1
  STA .__res3
  LDA .bss + 1
  CPI 0
  JPZ dn_done
dn_pop:
  PLA
  JSR #0
  LDA .bss + 1
  SUI 1
  STA .bss + 1
  JPZ dn_done
  JMP dn_pop
dn_zero:
  LDI 48
  JSR #0
  LDI 1
  STA .__res3
  LDA .bss + 2
  RET
dn_done:
  LDA .bss + 2
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: dispint ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20935
sign_bit_mask = .bss + 1   
print_count   = .bss + 3   
display_int:
  STA .bss
  STA .bss + 2
  LDI 2
  PHA
  LDA .__sys_bits_avail
  SUI 1
  PHA
  JSR #0
  STA .sign_bit_mask
  LDI 0
  STA .print_count
  LDA .bss
  CMP .sign_bit_mask      
  JPC di_negative
  JMP di_positive         
di_negative:
  LDI 45                  
  JSR #0
  LDI 1
  STA .print_count
  LDI 0
  SUB .bss
  STA .bss
di_positive:
  LDA .bss
  JSR #0
  LDA .__res3
  ADD .print_count
  STA .__res3
  LDA .bss + 2
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: dispnum ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20939
display_number:
  STA .bss
  STA .bss + 2
  LDA .bss
  CPI 0
  JPZ dn_zero
  LDI 0
  STA .bss + 1
dn_loop:
  LDA .bss
  CPI 0
  JPZ dn_print
  LDA .bss
  STA .__arg1
  LDI 10
  STA .__arg2
  JSR #0
  STA .bss            
  LDA .__res2
  ADI 48
  PHA                 
  LDA .bss + 1
  ADI 1
  STA .bss + 1
  JMP dn_loop
dn_print:
  LDA .bss + 1
  STA .__res3
  LDA .bss + 1
  CPI 0
  JPZ dn_done
dn_pop:
  PLA
  JSR #0
  LDA .bss + 1
  SUI 1
  STA .bss + 1
  JPZ dn_done
  JMP dn_pop
dn_zero:
  LDI 48
  JSR #0
  LDI 1
  STA .__res3
  LDA .bss + 2
  RET
dn_done:
  LDA .bss + 2
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: dispq78 ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20942
orig_val    = .bss + 0
work_val    = .bss + 1
sign_mask   = .bss + 2
chars       = .bss + 3
ipart       = .bss + 4
frac        = .bss + 5
digit       = .bss + 6
tmp         = .bss + 7
cnt         = .bss + 8
display_q7_8:
  STA .orig_val
  STA .work_val
  LDI 2
  PHA
  LDA .__sys_bits_avail
  SUI 1
  PHA
  JSR #0
  STA .sign_mask
  LDI 0
  STA .chars
  LDA .work_val
  CMP .sign_mask
  JPC q78_neg
  JMP q78_abs_done
q78_neg:
  LDI 45
  JSR #0
  LDI 1
  STA .chars
  LDI 0
  SUB .work_val
  STA .work_val
q78_abs_done:
  LDA .work_val
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  STA .ipart
  LDA .ipart
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  STA .tmp
  LDA .work_val
  SUB .tmp
  STA .frac
  LDA .ipart
  JSR #0
  LDA .__res3
  ADD .chars
  STA .chars
  LDI 46
  JSR #0
  LDA .chars
  ADI 1
  STA .chars
  LDI 3
  STA .cnt
q78_frac_loop:
  LDA .cnt
  CPI 0
  JPZ q78_done
  LDA .frac
  LSA
  STA .tmp          
  LDA .frac
  LSA
  LSA
  LSA               
  ADD .tmp          
  STA .frac
  LDA .frac
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  STA .digit
  LDA .digit
  ADI 48
  JSR #0
  LDA .chars
  ADI 1
  STA .chars
  LDA .digit
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  STA .tmp
  LDA .frac
  SUB .tmp
  STA .frac
  LDA .cnt
  SUI 1
  STA .cnt
  JMP q78_frac_loop
q78_done:
  LDA .chars
  STA .__res3
  LDA .orig_val
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: divide ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20951
divide:             
  LDA .__arg1
  STA .bss          
  LDA .__arg2
  STA .bss + 1      
  LDA .bss
  CPI 0
  JPZ div_a_zero
  LDA .bss + 1
  CPI 0
  JPZ div_zero
  LDA .bss
  CMP .bss + 1
  JPZ div_equal     
  JPC div_a_gt_b    
  LDA .bss
  STA .__res2
  LDI 0
  RET
div_equal:
  LDI 0
  STA .__res2
  LDI 1
  RET
div_a_zero:
  LDI 0
  STA .__res2
  LDI 0
  RET
div_a_gt_b:
  LDA .bss + 1
  CPI 1
  JPZ div_b_one
  LDI 0
  STA .__res1          
  LDI 1
  STA .bss + 2       
  JMP inc_b
div_b_one:
  LDI 0
  STA .__res2
  LDA .bss
  RET
inc_b:
  LDA .bss + 1      
  LSA               
  JPC div_loop      
  CMP .bss          
  JPZ pass          
  JPC div_loop      
pass:
  STA .bss + 1      
  LDA .bss + 2
  LSA
  STA .bss + 2      
  JMP inc_b
div_loop:
  LDA .bss + 2
  CPI 0
  JPZ div_end
  LDA .bss
  CMP .bss + 1
  JPC a_geq_b
  JMP continue
a_geq_b:
  LDA .__res1
  ADD .bss + 2
  STA .__res1         
  LDA .bss
  SUB .bss + 1
  STA .bss          
  CPI 0
  JPZ div_end
continue:
  LDA .bss + 1
  RSA
  STA .bss + 1      
  LDA .bss + 2
  RSA
  STA .bss + 2      
  JMP div_loop
div_end:
  LDA .bss
  STA .__res2
  LDA .__res1
  RET
div_zero:
  LDA .bss
  STA .__res2
  LDI 0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: dump ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20954
addr  = .bss          
main:
  LDA .__argv_base
  CPI 2               
  JPZ dmp_go
  RET
dmp_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .addr
  LDA .__argv_base + 2
  PHA
  JSR #0
  STA .bss + 1
  LDI 0
  STA .bss + 2
dmp_loop:
  LDA .bss + 1
  CPI 0
  JPZ dmp_end
  LPA .addr                
  STA .__arg1
  STA .bss + 6        
  STA .bss + 3        
  JSR dmp_digit_count
  LDI 9
  SUB .bss + 4
  STA .bss + 5
  JSR dmp_emit_padding
  LDA .bss + 6
  JSR #0
  LDA .addr
  ADI 1
  STA .addr
  LDA .bss + 1
  SUI 1
  STA .bss + 1
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  CPI 4
  JPZ dmp_newline
  JMP dmp_loop
dmp_newline:
  JSR #0
  LDI 0
  STA .bss + 2
  JMP dmp_loop
dmp_end:
  JSR #0
  RET
dmp_digit_count:
  LDA .bss + 3
  CPI 0
  JPZ ddc_zero
  LDI 0
  STA .bss + 4
ddc_loop:
  LDA .bss + 3
  CPI 0
  JPZ ddc_done
  LDA .bss + 3
  STA .__arg1
  LDI 10
  STA .__arg2
  JSR #0
  STA .bss + 3       
  LDA .bss + 4
  ADI 1
  STA .bss + 4
  JMP ddc_loop
ddc_zero:
  LDI 1
  STA .bss + 4
ddc_done:
  RET
dmp_emit_padding:
  LDA .bss + 5
  CPI 0
  JPZ dep_done
dep_loop:
  LDI 32
  JSR #0
  LDA .bss + 5
  SUI 1
  STA .bss + 5
  JPZ dep_done
  JMP dep_loop
dep_done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: echon ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
echon:
  LDA .__arg1
  PHA
  LDA .__arg2
  PHA
  LDA .__num_digits
  PHA
  JSR #0
  ADD .__arg1  
  STA .__arg1  
return:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: emu ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
l1 = 25632
l2 = 25665
l3 = 25698
l4 = 25731
l5 = 25764
l6 = 25797
l7 = 25830
l8 = 25863
l9 = 25896
l10 = 25929
l11 = 25962
l12 = 25995
l13 = 26028
l14 = 26061
l15 = 26094
l16 = 26127
l17 = 26160
main:
  LDI .l1
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l2
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l3
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l4
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l5
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l6
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l7
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l8
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l9
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l10
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l11
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l12
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l13
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l14
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l15
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l16
  STA .__arg1
  JSR print_zstr
  JSR #0
  LDI .l17
  STA .__arg1
  JSR print_zstr
  JSR #0
  RET
print_zstr:
  LPA .__arg1                
  STA .__char
  CPI 0
  JPZ pzs_done
  JSR #0
  LDA .__arg1
  ADI 1
  STA .__arg1
  JMP print_zstr
pzs_done:
  RET
.l1 =  "...............--------........."
.l2 =  "........--.--.---------........."
.l3 =  ".....--.----+++++#++----........"
.l4 =  "-...-++#++++++++###++#++-......."
.l5 =  "+++#######++++++++#+++##+++-+-++"
.l6 =  "+++######++++----+-++++++#++++++"
.l7 =  "+--+#-###++-------++++######+---"
.l8 =  "++--##+#+++++-------+#######+---"
.l9 =  "++++###++-+#------#+++#####+#+++"
.l10 = "+++#++++++---+++-----+####++++++"
.l11 = "++##+++++++++###+++++++###+++-++"
.l12 = "+++##++####################+++++"
.l13 = "++++#######################+++++"
.l14 = "++++++++++###############+++++++"
.l15 = "+++++++##++############+++++++++"
.l16 = "+++++++++++#########++++++++++++"
.l17 = "+++++++++###+###+++++###++++++++"

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: esh ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 20961
cmd_error_message = 26224
cmd_error_message_2 = 26242
cmd_error_message_3 = 26275
hist_entry_len = 40   
hist_max    = 40      
.cmd_error_message = "Unknown command: "
.cmd_error_message_2 = "Type HELP for a list of commands"
.cmd_error_message_3 = "Program not callable from shell"
start:
  JSR #0
  LDI 0
  STA .__cmd_len
  STA .__cmd_ready
  STA .bss + 2
  STA .bss + 3
  STA .bss + 4
  LDI .__input_buf
  STA .__input_ptr
  JSR print_prompt
  JMP main_loop
main_loop:
  JSR check_input
  LDA .bss + 1
  CPI 0
  JPZ no_input
  LDA .__no_input
  CPI 1
  JPZ main_loop
  LDA .bss
  CPI 31
  JPZ handle_enter
  CPI 32
  JPZ handle_enter
  CPI 42
  JPZ handle_hist_up
  CPI 53
  JPZ handle_hist_down
  CPI 43
  JPZ handle_backspace
  CPI 52
  JPZ handle_left
  LDA .__ascii_start
  ADD .bss
  LAP
  STA .__char
  JSR #0
  LDA .__input_ptr
  PHA
  LDA .__char
  SAS
  LDA .__input_ptr
  ADI 1
  STA .__input_ptr
  CPI .__input_buf + .hist_entry_len
  JPZ clamp_ptr
  JMP after_ptr
clamp_ptr:
  LDA .__input_ptr
  SUI 1
  STA .__input_ptr
after_ptr:
  LDA .__cmd_len
  ADI 1
  STA .__cmd_len
  CPI .hist_entry_len
  JPZ clamp_len
  JMP after_len
clamp_len:
  LDA .__cmd_len
  SUI 1
  STA .__cmd_len
after_len:
  LDI 1
  STA .__no_input
  JMP main_loop
no_input:
  LDI 0
  STA .__no_input
  JMP main_loop
handle_left:
  LDI 1
  STA .__no_input
  JMP main_loop
check_input:
  LDA .__inc_random_seed
  CPI 0
  JPZ pass_increase
  LDA .__random_seed
  ADI 1
  STA .__random_seed
pass_increase:
  KEI
  PHA
  CPI 128
  JPC input_entered     
  PLA
  LDI 0
  STA .bss + 1
  RET
input_entered:
  PLA
  SUI 128
  OUT
  STA .bss
  LDI 1
  STA .bss + 1
  LDI 0
  STA .__inc_random_seed
  RET
handle_hist_up:
  JSR history_up
  LDI 1
  STA .__no_input
  JMP main_loop
handle_hist_down:
  JSR history_down
  LDI 1
  STA .__no_input
  JMP main_loop
handle_backspace:
  LDA .__input_ptr
  CPI .__input_buf
  JPZ hb_done
  LDA .__input_ptr
  SUI 1
  STA .__input_ptr
  LDA .__input_ptr
  PHA
  LDI 0
  SAS
  LDA .__cmd_len
  CPI 0
  JPZ hb_after_len
  SUI 1
  STA .__cmd_len
hb_after_len:
  JSR cursor_left
  LDI 32
  JSR #0
  JSR cursor_left
hb_done:
  LDI 1
  STA .__no_input
  JMP main_loop
handle_enter:
  LDA .__input_ptr
  PHA
  LDI 0
  SAS
  LDI 1
  STA .__cmd_ready
  JSR enter
  JSR run_command
  JSR save_history
  LDI .__input_buf
  STA .__input_ptr
  LDI 0
  STA .__cmd_len
  JSR print_prompt
  LDI 1
  STA .__no_input
  JMP main_loop
print_newline:
  PHA
  JSR #0
  RET
print_no_newline:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET
ret_home:
  JSR #0
  DIS 24
  JSR #0
  RET
print_prompt:
  LDI 62
  JSR #0
  LDI 32
  JSR #0
  RET
cursor_left:
  DIS 18
  JSR #0
  RET
enter:
  JSR #0
  RET
clear_line:
  JSR ret_home
  LDI 40
  STA .__num_digits
cl_loop:
  LDI 32
  JSR #0
  LDA .__num_digits
  SUI 1
  STA .__num_digits
  JNZ cl_loop
cl_done:
  JSR ret_home
  JSR print_prompt
  RET
run_command:
  LDI .__input_buf
  STA .bss + 1609
  JSR skip_spaces
  JSR dispatch_program
  RET
skip_spaces:
  LPA .bss + 1609
  CPI 32
  JPZ sksp_inc
  RET
sksp_inc:
  LDA .bss + 1609
  ADI 1
  STA .bss + 1609
  JMP skip_spaces
dispatch_program:
  LDA .bss + 1609
  PHA
  LDI 32
  PHA                       
  JSR #0
  PLA                       
  STA .__res1
  PLA                       
  STA .__res2
  PLA                       
  LDA .__res2
  CPI 0
  JPZ dp_nomatch            
  LDI .__input_buf
  ADD .__res2                 
  STA .bss + 1608           
  LDA .__res1
  STA .__arg1
  JSR #0
  STA .bss + 1619           
  CPI 0
  JPZ dp_nomatch
  LDA .__res2
  CPI 0
  JPZ dp_not_callable
dp_match:
  LDA .bss + 1608
  STA .bss + 1609
  JSR skip_spaces
  LDA .bss + 1609
  STA .bss + 1615
  JSR build_argv
  LDI .__argv_base
  STA .__arg1
  LDI .__argv_buf
  STA .__arg2
  LDA .bss + 1619
  STA 19997
  JSR #19996
  LDA 19999
  STA 19997 
  LDI 1
  STA .bss
  RET
dp_nomatch:
  LDA .__cmd_len
  CPI 0
  JPZ err_help
  LDI .cmd_error_message
  JSR print_no_newline
  LDI .__input_buf
  JSR print_newline
  JMP err_help
dp_not_callable:
  LDI .cmd_error_message_3
  JSR print_newline
err_help:
  LDI .cmd_error_message_2
  JSR print_newline
  LDI 0
  STA .bss
  RET
build_argv:
  LDI .__argv_base
  PHA
  LDI 0
  SAS
  LDI .__argv_base
  ADI 1
  STA .bss + 1613
  LDI .__argv_buf
  STA .bss + 1614
  LDA .bss + 1615
  STA .bss + 1616
ba_next_token:
  LPA .bss + 1616
  CPI 32
  JPZ ba_skip_whitespace
  CPI 0
  JPZ ba_done
  JMP ba_start
ba_skip_whitespace:
  LDA .bss + 1616
  ADI 1
  STA .bss + 1616
  JMP ba_next_token
ba_start:
  LDA .__argv_base
  CPI 8
  JPZ ba_done
  LDA .bss + 1613
  PHA
  LDA .bss + 1614
  SAS
  LDA .bss + 1614
  STA .bss + 1612
ba_copy:
  LPA .bss + 1616
  CPI 0
  JPZ ba_term
  CPI 32
  JPZ ba_term
  STA .bss + 1618
  LDA .bss + 1612
  PHA
  LDA .bss + 1618
  SAS
  LDA .bss + 1616
  ADI 1
  STA .bss + 1616
  LDA .bss + 1612
  ADI 1
  STA .bss + 1612
  JMP ba_copy
ba_term:
  LDA .bss + 1612
  PHA
  LDI 0
  SAS
  LDA .bss + 1612
  ADI 1
  STA .bss + 1614
  LDA .__argv_base
  ADI 1
  STA .bss + 1617
  LDI .__argv_base
  PHA
  LDA .bss + 1617
  SAS
  LDA .bss + 1613
  ADI 1
  STA .bss + 1613
  JMP ba_next_token
ba_done:
  RET
save_history:
  LDA .__cmd_len
  CPI 0
  JPZ sh_done
  LDA .bss + 2
  STA .bss + 5
  LDA .bss + 5
  LSA
  LSA
  LSA
  LSA
  STA .bss + 6
  LDA .bss + 5
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  ADD .bss + 6
  STA .bss + 6
  LDI .bss + 7
  ADD .bss + 6
  STA .bss + 1610
  LDI .__input_buf
  STA .bss + 1611
  LDI 0
  STA .bss + 1617
sh_copy:
  LDA .bss + 1617
  CPI 80
  JPZ sh_pad_done
  LPA .bss + 1611
  STA .bss + 1618
  CPI 0
  JPZ sh_pad
  LDA .bss + 1610
  PHA
  LDA .bss + 1618
  SAS
  LDA .bss + 1611
  ADI 1
  STA .bss + 1611
  LDA .bss + 1610
  ADI 1
  STA .bss + 1610
  LDA .bss + 1617
  ADI 1
  STA .bss + 1617
  JMP sh_copy
sh_pad:
  LDA .bss + 1610
  PHA
  LDI 0
  SAS
  LDA .bss + 1610
  ADI 1
  STA .bss + 1610
  LDA .bss + 1617
  ADI 1
  STA .bss + 1617
  JMP sh_copy
sh_pad_done:
  LDA .bss + 2
  ADI 1
  CPI .hist_max
  JPZ sh_head_wrap
  STA .bss + 2
  JMP sh_head_set
sh_head_wrap:
  LDI 0
  STA .bss + 2
sh_head_set:
  LDA .bss + 3
  ADI 1
  CPI .hist_max
  JPZ sh_cnt_cap
  STA .bss + 3
  JMP sh_cnt_done
sh_cnt_cap:
  LDI .hist_max
  STA .bss + 3
sh_cnt_done:
  LDI 0
  STA .bss + 4
sh_done:
  RET
history_load_current:
  JSR clear_line
  LDI .__input_buf
  STA .__input_ptr
  LDI 0
  STA .__cmd_len
  LDA .bss + 4
  CPI 0
  JPZ hlc_blank
  LDA .bss + 2
  CMP .bss + 4
  JPC hlc_nowrap
  LDA .bss + 2
  ADI .hist_max
  SUB .bss + 4
  STA .bss + 1617
  JMP hlc_idx_ready
hlc_nowrap:
  LDA .bss + 2
  SUB .bss + 4
  STA .bss + 1617
hlc_idx_ready:
  LDA .bss + 1617
  LSA
  LSA
  LSA
  LSA
  STA .bss + 6
  LDA .bss + 1617
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  ADD .bss + 6
  STA .bss + 6
  LDI .bss + 7
  ADD .bss + 6
  STA .bss + 1611
  LDI 0
  STA .bss + 1617
hlc_copy:
  LDA .bss + 1617
  CPI .hist_entry_len
  JPZ hlc_done
  LPA .bss + 1611
  STA .__char
  CPI 0
  JPZ hlc_done
  JSR #0
  LDA .__input_ptr
  PHA
  LDA .__char
  SAS
  LDA .bss + 1611
  ADI 1
  STA .bss + 1611
  LDA .__input_ptr
  ADI 1
  STA .__input_ptr
  LDA .__cmd_len
  ADI 1
  STA .__cmd_len
  LDA .bss + 1617
  ADI 1
  STA .bss + 1617
  JMP hlc_copy
hlc_done:
  LDA .__input_ptr
  PHA
  LDI 0
  SAS
  RET
hlc_blank:
  LDA .__input_ptr
  PHA
  LDI 0
  SAS
  RET
history_up:
  LDA .bss + 3
  CPI 0
  JPZ hup_done
  LDA .bss + 4
  CMP .bss + 3
  JPC hup_load
  LDA .bss + 4
  ADI 1
  STA .bss + 4
hup_load:
  JSR history_load_current
hup_done:
  RET
history_down:
  LDA .bss + 4
  CPI 0
  JPZ hdn_load
  LDA .bss + 4
  SUI 1
  STA .bss + 4
hdn_load:
  JSR history_load_current
  RET
res_bss:
  LDI 0
  STA .bss + 1607

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: fibonacci ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22581
start:
  LDI 1
  STA .bss
  LDI 0
  STA .bss + 1
  JSR #0
  JSR #0
add:
  LDA .bss
  ADD .bss + 1
  STA .bss
  JSR #0
  JSR #0
  CPI 30
  JPC done
  ADD .bss + 1
  STA .bss + 1
  JSR #0
  JSR #0
  CPI 30
  JPC done
  JMP add
done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: fillmem ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22583
start:
  LDA .__argv_base
  CPI 3
  JPZ cl_go
  RET
cl_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .bss
  LDA .__argv_base + 2
  PHA
  JSR #0
  STA .bss + 1
  LDA .__argv_base + 3
  PHA
  JSR #0
  STA .bss + 2
fill:
  LDA .bss + 1
  CPI 0
  JPZ fl_ret
  LDA .bss
  STA .__work2
  LDA .bss + 1
  STA .__work4
fl_loop:
  LDA .__work4
  CPI 0
  JPZ fl_ret
  LDA .__work2
  PHA
  LDA .bss + 2
  SAS
  LDA .__work2
  ADI 1
  STA .__work2
  LDA .__work4
  SUI 1
  STA .__work4
  JMP fl_loop
fl_ret:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: gcd ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22586
gcd:
  LDA .__arg1
  STA .bss
  LDA .__arg2
  STA .bss + 1
gcd_loop:
  LDA .bss + 1
  CPI 0
  JPZ gcd_done
  LDA .bss
  STA .__arg1
  LDA .bss + 1
  STA .__arg2
  JSR #0
  LDA .bss + 1
  STA .bss
  LDA .__res2
  STA .bss + 1
  JMP gcd_loop
gcd_done:
  LDA .bss
  STA .__res1
  LDA .__res1
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: getmnemonicn ------

--- Assembling ---

bss = 22588
mnemonics = 26336
.mnemonics = "LDA,1,ADD,2,SUB,3,STA,4,LDI,5,JMP,6,JPC,7,JPZ,8,KEI,9,ADI,10,SUI,11,CMP,12,PHA,13,PLA,14,LDS,15,JSR,16,RET,17,SAS,18,LAS,19,LDB,20,CPI,21,RSA,22,LSA,23,DIS,24,DIC,25,LDD,26,JNZ,27,STB,28,MOVBA,29,MOVAB,30,LSP,31,MVASP,32,MVBSP,33,SUM,34,LAP,35,LPA,36,DIA,37,OUT,254,HLT,255"
get_mnemonic:
  PLA                
  MOVAB              
  PLA                
  STA .bss
  MOVBA              
  PHA                
  LDA .bss           
  PHA
  LDI .mnemonics     
  PHA
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: osabi ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22590
abi_vars = 26640
.abi_vars = "CHAR,2000,TEXTLOC,2001,ARG1,2002,ARG2,2003,RES1,2004,RES2,2005,RES3,2014,POW2,2006,NUM-DIGITS,2007,ASCII-START,2008,NO-INPUT,2009,WORK1,2010,WORK2,2011,WORK3,2012,WORK4,2013,INPUT-BUF,2122,INPUT-PTR,2202,CMD-LEN,2203,CMD-READY,2204,ARGV-BASE,2400,ARGV-BUF,2500,RANDOM-SEED,2600,INC-RANDOM-SEED,2601,BITS-AVAIL,2602,SCREEN-WIDTH,2603,SCREEN-HEIGHT,2604,PROG-TABLE,3000"
get_os_abi_var:
  PLA                
  MOVAB              
  PLA                
  STA .bss
  MOVBA              
  PHA                
  LDA .bss           
  PHA
  LDI .abi_vars      
  PHA
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: getprogaddr ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22592
get_program_address:
  LDA .__arg1
  STA .bss
  LDI 0
  STA .bss + 1          
compare_loop:
  LDI .__sys_prog_table
  ADD .bss + 1
  STA .bss + 2          
  LAP                   
  CPI 0                 
  JPZ no_match
  LDA .bss + 2
  PHA
  LDA .bss
  PHA
  JSR #0
  CPI 1
  JPZ match
  LDA .bss + 1
  ADI 32                
  STA .bss + 1
  JMP compare_loop
match:
  LDI .__sys_prog_table
  ADD .bss + 1          
  ADI 22                
  LAP                   
  STA .__res2
  LDI .__sys_prog_table
  ADD .bss + 1          
  ADI 16                
  LAP                   
  STA .__res1
  RET
no_match:
  LDI 0
  STA .__res1
  STA .__res2
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: help ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22595
separator = 27024
help_items = 27026
more_text = 28666
.separator = "\"
.help_items = "Available commands:                     \----------------------------------------\OSINFO        : print system info       \CAT <addr>    : Print text from <addr>  \                until null terminator   \                                        \HELP          : show this help text     \TED <arg>     : Edit text at mem[arg:]  \COMPILE <a1> <a2>: Compile EASM text at \      mem[a1:] to executable at mem[a2:]\                                        \RUN <addr>    : run mach. code at <addr>\CALC <a> <op> <b>  : compute result     \           op={+,-,*,/,P(power),S(sqrt)}\                                        \MEMEDIT <addr>: begin memedit at <addr> \PEEK <a>      : print mem[<a>]          \POKE <a> <val>: store <val> at <a>      \DUMP <a> <n>  : print decimal words     \HEXDUMP <a> <n>    : print hex words    \FILLMEM <start> <num> <val>: fill memory\    From <start>, N=<num> with <val>    \                                        \CPYMEM <src> <dst> <len>: copy memory   \    mem[src:src+len] > mem[dst:dst+len] \                                        \PUZZLE        : Matt Parker 19 puzzle   \PRIMES        : print primes up to 300  \FIBONACCI     : print fibonacci values  \EMU           : shows some art          \ASTEROIDS     : play asteroids          \TETRIS        : play tetris             \TESTMEM       : List start/stop/size of \           every memory block with 100+ \           contiguous nulls             \                                        \ESH           : simple command prompt   \LIST          : show installed routines \CLS           : clear the screen        \OFF           : disable screen and halt "
.more_text = "              --- more ---"
screen_height_sub1 = bss + 3
help:
  LDA .__sys_screen_height
  SUI 1
  STA .screen_height_sub1
  LDI 0
  STA .bss
  STA .bss + 1
hp_advance:
  LDI .help_items
  ADD .bss + 1
  PHA
  LDA .separator
  PHA
  JSR #0
  PLA
  STA .__res1
  PLA
  STA .__res2
  PLA
  STA .bss + 2
  LDA .__res2
  CPI 0
  JPZ hp_done                 
  ADD .bss + 1                
  ADI 1                       
  STA .bss + 1
  LDA .__res1
  PHA
  JSR #0
  LDA .bss + 2                   
  CPI 1                       
  JPZ hp_done
hp_newline:
  LDA .bss
  ADI 1
  STA .bss
  CMP .screen_height_sub1
  JPZ hp_more
  JMP hp_advance
hp_more:
  LDI .more_text
  PHA
  LDI 1
  PHA       
  LDI 0
  PHA       
  JSR #0
hp_wait_key:
  KEI
  PHA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  CPI 1
  JPZ hp_key_ok
  PLA
  JMP hp_wait_key
hp_key_ok:
  PLA
  JSR #0
  LDI 0
  STA .bss
  JMP hp_advance
hp_done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: hexdump ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22598
hex_map = 28720
.hex_map = "0123456789ABCDEF"
addr       = .bss          
main:
  LDA .__argv_base
  CPI 2               
  JPZ hx_go
  RET
hx_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .addr
  LDA .__argv_base + 2
  PHA
  JSR #0
  STA .bss + 1
  LDA .__sys_bits_avail
  CPI 17
  JPC hx_set_32          
  LDI 0
  STA .bss + 6           
  JMP hx_mode_done
hx_set_32:
  LDI 1
  STA .bss + 6           
hx_mode_done:
  LDI 0
  STA .bss + 2
hx_loop:
  LDA .bss + 1
  CPI 0
  JPZ hx_end
  LPA .addr                
  STA .__arg1           
  LDA .bss + 6
  CPI 0
  JPZ hx_do16
  JSR print_hex8
  JMP hx_after_print
hx_do16:
  JSR print_hex4
hx_after_print:
  LDA .addr
  ADI 1
  STA .addr
  LDA .bss + 1
  SUI 1
  STA .bss + 1
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  LDA .bss + 6
  CPI 0
  JPZ hx_chk16cols
  LDA .bss + 2
  CPI 4
  JPZ hx_newline
  JMP hx_space
hx_chk16cols:
  LDA .bss + 2
  CPI 8
  JPZ hx_newline
hx_space:
  LDI 32
  JSR #0
  JMP hx_loop
hx_newline:
  JSR #0
  LDI 0
  STA .bss + 2
  JMP hx_loop
hx_end:
  JSR #0
  RET
print_hex4:
  LDA .__arg1
  STA .bss + 4       
  LDI 0
  STA .bss + 3       
  LDA .bss + 4
  CPI 0
  JPZ ph_zero
ph_loop:
  LDA .bss + 4
  STA .__arg1           
  LDI 16
  STA .__arg2
  JSR #0
  STA .bss + 4
  LDA .__res2
  CPI 10
  JPC ph_hex_ge10
  ADI 48              
  JMP ph_hex_push
ph_hex_ge10:
  SUI 10
  ADI 65              
ph_hex_push:
  PHA                 
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  LDA .bss + 4
  CPI 0
  JPZ ph_pad
  JMP ph_loop
ph_zero:
  LDI 48              
  PHA
  LDI 1
  STA .bss + 3
  JMP ph_pad
ph_pad:
  LDI 4
  SUB .bss + 3
  STA .bss + 5        
ph_pad_loop:
  LDA .bss + 5
  CPI 0
  JPZ ph_print
  LDI 32
  JSR #0
  LDA .bss + 5
  SUI 1
  STA .bss + 5
  JMP ph_pad_loop
ph_print:
  PLA
  JSR #0
  LDA .bss + 3
  SUI 1
  STA .bss + 3
  JPZ ph_done
  JMP ph_print
ph_done:
  RET
print_hex8:
  LDA .__arg1
  STA .bss + 4
  LDI 0
  STA .bss + 3
  LDA .bss + 4
  CPI 0
  JPZ ph8_zero
ph8_loop:
  LDA .bss + 4
  STA .__arg1
  LDI 16
  STA .__arg2
  JSR #0
  STA .bss + 4
  LDA .__res2
  CPI 10
  JPC ph8_ge10
  ADI 48
  JMP ph8_push
ph8_ge10:
  SUI 10
  ADI 65
ph8_push:
  PHA
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  LDA .bss + 4
  CPI 0
  JPZ ph8_pad
  JMP ph8_loop
ph8_zero:
  LDI 48
  PHA
  LDI 1
  STA .bss + 3
  JMP ph8_pad
ph8_pad:
  LDI 8
  SUB .bss + 3
  STA .bss + 5
ph8_pad_loop:
  LDA .bss + 5
  CPI 0
  JPZ ph8_print
  LDI 32
  JSR #0
  LDA .bss + 5
  SUI 1
  STA .bss + 5
  JMP ph8_pad_loop
ph8_print:
  PLA
  JSR #0
  LDA .bss + 3
  SUI 1
  STA .bss + 3
  JPZ ph8_done
  JMP ph8_print
ph8_done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: ispositive ------

--- Assembling ---

__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22605
val    = .bss + 0
mask   = .bss + 1
count  = .bss + 2
is_positive:
  STA .val
  LDI 1
  STA .mask
  LDA .__sys_bits_avail
  SUI 1
  STA .count
ip_mloop:
  LDA .count
  CPI 0
  JPZ ip_mdone
  LDA .mask
  LSA
  STA .mask
  LDA .count
  SUI 1
  STA .count
  JMP ip_mloop
ip_mdone:
  LDA .val
  CMP .mask
  JPC ip_negative
  LDI 1
  JMP ip_setc_ret
ip_negative:
  LDI 0
ip_setc_ret:
  CPI 1
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: list ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22608
more_text = 28768
.more_text = "              --- more ---"
screen_height_sub1 = .bss + 3
list_commands:
  LDA .__sys_screen_height
  SUI 1
  STA .screen_height_sub1
  LDI .__sys_prog_table
  STA .bss + 1
  LDI 0
  STA .bss + 2
  STA .bss
  LDI 0
  STA .flagtmp          
lc_next:
  LPA .bss + 1                
  CPI 0
  JPZ lc_end
  LDA .bss + 1
  STA .__res2
  LDA .bss + 1         
  ADI 22               
  STA .__work1
  LDA .__work1
  STA .__res2            
  LAP                  
  CPI 0
  JPZ lc_flag_first_space
  LDI 42               
  JSR #0
  JMP lc_flag_first_done
lc_flag_first_space:
  LDI 32               
  JSR #0
lc_flag_first_done:
  LDA .bss + 1
  ADI 0
  STA .__res2
  LDI 0
  STA .__num_digits
lc_printchar:
  LDA .__num_digits
  CPI 16
  JPZ lc_aftercol      
  LPA .__res2                
  CPI 0
  JPZ lc_pad
  JSR #0
  LDA .__res2
  ADI 1
  STA .__res2
  LDA .__num_digits
  ADI 1
  STA .__num_digits
  JMP lc_printchar
lc_pad:
  LDA .__num_digits
  CPI 16
  JPZ lc_aftercol
  LDI 32
  JSR #0
  LDA .__num_digits
  ADI 1
  STA .__num_digits
  JMP lc_pad
lc_aftercol:
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  CPI 2
  JPZ lc_newline
  JMP lc_advance
lc_newline:
  JSR #0
  LDA .bss
  ADI 1
  STA .bss
  CMP .screen_height_sub1
  JPZ lc_more
  LDI 0
  STA .bss + 2
  JMP lc_advance
lc_more:
  LDI .more_text
  PHA
  LDI 1
  PHA       
  LDI 0
  PHA       
  JSR #0
lc_wait_key:
  KEI
  PHA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  CPI 1
  JPZ lc_key_ok
  PLA
  JMP lc_wait_key
lc_key_ok:
  PLA
  JSR #0
  LDI 0
  STA .bss
  STA .bss + 2
lc_advance:
  LDA .bss + 1
  ADI 32                
  STA .bss + 1
  JMP lc_next
lc_end:
  LDA .bss + 2
  CPI 1
  JPZ end_newline
  RET
end_newline:
  JSR #0
  RET

--- Encode into memory ---

  STA .flagtmp          ; reuse bss space if defined later (ensure clear), mem_ins == 0, check if correct

--- Assembled program ---



 ------ Assembling snippet: memedit ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22612
line_len = 40
main:
  LDA .__argv_base
  CPI 1
  JPZ me_go
  RET
me_go:
  LDA .__argv_base + 1
  STA .__res2           
  LDI 0
  STA .__res1
me_pn:
  LPA .__res2                
  CPI 0
  JPZ me_pn_done
  CPI 32
  JPZ me_pn_done
  SUI 48
  STA .__char
  LDA .__res1
  LSA
  STA .__pow2
  LSA
  LSA
  ADD .__pow2
  STA .__res1
  LDA .__res1
  ADD .__char
  STA .__res1
  LDA .__res2
  ADI 1
  STA .__res2
  JMP me_pn
me_pn_done:
  LDA .__res1
  STA .bss
  STA .bss + 1
  LDI .bss
  ADI 64
  STA .bss + 4
  LDA .bss + 4
  STA .bss + 2
  LDI 0
  STA .bss + 3
  JSR print_prompt
  JSR flush_input
me_loop:
  JSR check_input
  LDA .__res2
  CPI 0
  JPZ me_loop
  LDA .__res1
  CPI 31
  JPZ me_enter
  CPI 32
  JPZ me_enter
  CPI 43
  JPZ me_backspace
  LDA .__ascii_start
  ADD .__res1
  LAP
  STA .__char
  JSR #0
  LDA .bss + 2
  PHA
  LDA .__char
  SAS
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  LDA .bss + 4
  ADI .line_len
  STA .__res2
  LDA .bss + 2
  CMP .__res2
  JPZ me_clamp_ptr
  JMP me_after_ptr
me_clamp_ptr:
  LDA .bss + 2
  SUI 1
  STA .bss + 2
me_after_ptr:
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  LDI .line_len
  CMP .bss + 3
  JPZ me_clamp_len
  JMP me_after_len
me_clamp_len:
  LDA .bss + 3
  SUI 1
  STA .bss + 3
me_after_len:
  JSR flush_input
  JMP me_loop
me_backspace:
  LDA .bss + 3
  CPI 0
  JPZ me_bs_done
  LDA .bss + 2
  SUI 1
  STA .bss + 2
  LDA .bss + 2
  PHA
  LDI 0
  SAS
  LDA .bss + 3
  SUI 1
  STA .bss + 3
  JSR cursor_left
  LDI 32
  JSR #0
  JSR cursor_left
me_bs_done:
  JSR flush_input
  JMP me_loop
me_enter:
  LDA .bss + 2
  PHA
  LDI 0
  SAS
  LDA .bss + 3
  CPI 0
  JPZ me_exit
  JSR parse_and_store
  LDA .bss + 4
  STA .bss + 2
  LDI 0
  STA .bss + 3
  JSR #0
  JSR print_prompt
  JSR flush_input
  JMP me_loop
me_exit:
  JSR #0
  JSR flush_input
  LDI 0
  STA .__no_input
  RET
parse_and_store:
  LDA .bss + 4
  STA .bss + 5
pas_next_token:
  LPA .bss + 5                
  CPI 32
  JPZ pas_skip1
  CPI 0
  JPZ pas_done
  JMP pas_start
pas_skip1:
  LDA .bss + 5
  ADI 1
  STA .bss + 5
  JMP pas_next_token
pas_start:
  LDI 0
  STA .bss + 6
  LDI 0
  STA .__num_digits
pas_digits:
  LPA .bss + 5                
  CPI 48
  JPC pas_check_hi
  JMP pas_after_num
pas_check_hi:
  CPI 58
  JPC pas_after_num
  SUI 48
  STA .__char
  LDA .bss + 6
  LSA
  STA .__pow2
  LSA
  LSA
  ADD .__pow2
  STA .bss + 6
  LDA .bss + 6
  ADD .__char
  STA .bss + 6
  LDA .bss + 5
  ADI 1
  STA .bss + 5
  LDA .__num_digits
  ADI 1
  STA .__num_digits
  JMP pas_digits
pas_after_num:
  LDA .__num_digits
  CPI 0
  JPZ pas_sep_adv
  LDA .bss + 1
  PHA
  LDA .bss + 6
  SAS
  LDA .bss + 1
  ADI 1
  STA .bss + 1
  JMP pas_next_token
pas_sep_adv:
  LDA .bss + 5
  ADI 1
  STA .bss + 5
  JMP pas_next_token
pas_done:
  RET
print_prompt:
  LDI 35              
  JSR #0
  LDI 32
  JSR #0
  LDI 91              
  JSR #0
  LDA .bss + 1        
  JSR #0
  LDI 93              
  JSR #0
  LDI 32              
  JSR #0
  RET
cursor_left:
  DIS 18
  JSR #0
  RET
check_input:
  KEI
  PHA
  CPI 128
  JPC input_entered     
  PLA
  LDI 0
  STA .__res2
  RET
input_entered:
  PLA
  SUI 128
  OUT
  STA .__res1
  LDI 1
  STA .__res2
  RET
flush_input:
  JSR check_input
  LDA .__res2
  CPI 0
  JPZ fi_done
  JMP flush_input
fi_done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: modmul ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22619
modmul:
  LDA .__arg1
  STA .bss + 1      
  LDA .__arg2
  STA .bss + 2      
  LDA .__res1
  STA .bss + 3      
  LDI 0
  STA .bss          
  LDA .bss + 1
  STA .__arg1
  LDA .bss + 3
  STA .__arg2
  JSR #0
  LDA .__res2
  STA .bss + 1
mm_loop:
  LDA .bss + 2
  CPI 0
  JPZ mm_done
  RSA
  STA .__char         
  JPC mm_add
mm_store_y:
  LDA .__char
  STA .bss + 2
  LDA .bss + 1
  ADD .bss + 1
  STA .bss + 1
  JPC mm_x_sub_carry
  CMP .bss + 3
  JPC mm_x_sub_carry
  JMP mm_x_done
mm_add:
  LDA .bss
  ADD .bss + 1
  STA .bss
  JPC mm_sub_mod_carry
  CMP .bss + 3
  JPC mm_sub_mod_carry
  JMP mm_store_y
mm_sub_mod_carry:
  LDA .bss
  SUB .bss + 3
  STA .bss
  JMP mm_store_y
mm_x_sub_carry:
  LDA .bss + 1
  SUB .bss + 3
  STA .bss + 1
mm_x_done:
  JMP mm_loop
mm_done:
  LDA .bss
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: multiply ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22623
multiply:
  PLA                     
  MOVAB                   
  PLA                     
  STA .bss + 1
  PLA                     
  STA .bss + 2
  MOVBA                   
  PHA                     
  LDI 0
  STA .bss + 4
mult_loop:
  LDA .bss + 2
  CPI 0
  JPZ mult_done
  RSA                     
  STA .bss + 3            
  JPC mult_add
mult_shift:
  LDA .bss + 3
  STA .bss + 2
  LDA .bss + 1
  LSA
  STA .bss + 1
  JMP mult_loop
mult_add:
  LDA .bss + 4
  ADD .bss + 1
  STA .bss + 4
  JMP mult_shift
mult_done:
  LDA .bss + 4
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: newline ------

--- Assembling ---

newline:
  DIS 32
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: off ------

--- Assembling ---

main:
  DIS 1
  JSR #0
  DIS 8
  JSR #0
  HLT

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: osinfo ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22628
linechar = 28816
version = 28818
sys_bits_avail_text_1 = 28853
memory_available_text = 28879
memory_available_text_2 = 28907
installed_progs_text = 28940
installed_progs_text_2 = 28970
bss_text = 29000
data_text = 29030
end_data_text = 29060
help_text = 29097
list_text = 29130
list_text_2 = 29168
.linechar = "-"
.version =                 "EShell (ESH) 25.9.0a5 - 2025-09-28"
.sys_bits_avail_text_1 =       "AReg size       : %u bits"
.memory_available_text =   "Memory available: %u kwords"
.memory_available_text_2 = "                  (%u bits/word)"
.installed_progs_text =    "Installed routines/programs: "
.installed_progs_text_2 =  "Words used for programs (k): "
.bss_text =                "Words reserved for BSS (k) : "
.data_text =               "Words reserved for data (k): "
.end_data_text =           "Reserved memory            : [0, %u)"
.help_text = "Type HELP for a list of commands"
.list_text = "Type LIST for a list of all installed"
.list_text_2 = "                  routines/programs"
osinfo:
  JSR write_40_dash
  LDI .version
  JSR print_newline
  LDI .sys_bits_avail_text_1
  PHA
  LDI .__sys_bits_avail
  PHA
  JSR #0
  LDI .__sys_bits_avail_text_2  
  LDI 0
  SUI 1
  STA .__arg1
  LDI 1000
  STA .__arg2
  JSR #0
  LDI .memory_available_text
  PHA
  LDI .__res1
  PHA
  JSR #0
  LDI .memory_available_text_2
  PHA
  LDI .__sys_bits_avail
  PHA
  JSR #0
  JSR get_num_progs
  LDI .installed_progs_text
  JSR print_no_newline
  LDA .bss + 2
  JSR #0
  JSR #0
  LDI .installed_progs_text_2
  JSR print_no_newline
  LDA .bss + 3                    
  STA .bss + 10
  LDA .bss + 7
  STA .bss + 11
  JSR print_decimal
  JSR #0
  LDI .bss_text
  JSR print_no_newline
  LDA .bss + 4                    
  STA .bss + 10
  LDA .bss + 8
  STA .bss + 11
  JSR print_decimal
  JSR #0
  LDI .data_text
  JSR print_no_newline
  LDA .bss + 5                    
  STA .bss + 10
  LDA .bss + 9
  STA .bss + 11
  JSR print_decimal
  JSR #0
  LDI .end_data_text
  PHA
  LDA .bss + 14
  STA .__sys_reserved_region_end
  LDI .bss + 14                   
  PHA
  JSR #0
  JSR write_40_dash
  LDI .help_text
  JSR print_newline
  LDI .list_text
  JSR print_newline
  LDI .list_text_2
  JSR print_newline
  JSR write_40_dash
  JSR #0
  RET
print_decimal:  
  LDA .bss + 10
  JSR #0
  LDI 46
  JSR #0
  LDA .bss + 11
  CPI 10
  JPC pd_two_digits    
  LDI 48               
  JSR #0
pd_two_digits:
  LDA .bss + 11
  JSR #0
  RET
get_num_progs:
  LDI .__sys_prog_table
  ADI 16
  LAP
  STA .bss + 10 
  LDI 0
  STA .bss + 1  
  STA .bss + 2  
  STA .bss + 3  
  STA .bss + 4  
  STA .bss + 5  
  STA .bss + 7  
  STA .bss + 8  
  STA .bss + 9  
  STA .bss + 12 
  STA .bss + 13 
  STA .bss + 14 
  STA .bss + 15 
  STA .bss + 16 
check_prog_loop:
  LDI .__sys_prog_table
  ADD .bss + 1
  LAP                 
  CPI 0
  JPZ get_n_progs_end 
  LDA .bss + 2
  ADI 1
  STA .bss + 2        
  LDA .bss + 1
  ADI 16              
  STA .bss + 1
  ADI .__sys_prog_table
  LAP                 
  STA .bss + 12
  LDA .bss + 1
  ADI 1               
  STA .bss + 1
  ADI .__sys_prog_table
  LAP                 
  STA .bss + 3        
  LDA .bss + 1
  ADI 2               
  STA .bss + 1
  ADI .__sys_prog_table
  LAP                 
  ADD .bss + 4        
  STA .bss + 4        
  LDA .bss + 1
  ADI 1               
  STA .bss + 1
  ADI .__sys_prog_table
  LAP                 
  STA .bss + 13       
  LDA .bss + 1
  ADI 1               
  STA .bss + 1
  ADI .__sys_prog_table
  LAP                 
  STA .bss + 15       
  CPI 0
  JPZ skip_data_end
  LDA .bss + 16       
  CPI 1
  JPC skip_set_data_start
  LDA .bss + 13       
  STA .bss + 16       
skip_set_data_start:
  LDA .bss + 15       
  ADD .bss + 13       
  STA .bss + 14       
skip_data_end:
  LDA .bss + 1
  ADI 11              
  STA .bss + 1
  JMP check_prog_loop
get_n_progs_end:
  LDA .bss + 12       
  ADD .bss + 3        
  SUB .bss + 10       
  STA .__arg1
  LDI 1000
  STA .__arg2
  JSR #0
  STA .bss + 3        
  LDA .__res2           
  STA .__arg1
  LDI 10
  STA .__arg2
  JSR #0
  STA .bss + 7        
  LDA .bss + 4
  STA .__arg1
  LDI 1000
  STA .__arg2
  JSR #0 
  STA .bss + 4        
  LDA .__res2           
  STA .__arg1
  LDI 10
  STA .__arg2
  JSR #0
  STA .bss + 8        
  LDA .bss + 14       
  SUB .bss + 16       
  STA .__arg1
  LDI 1000
  STA .__arg2
  JSR #0
  STA .bss + 5        
  LDA .__res2           
  STA .__arg1
  LDI 10
  STA .__arg2
  JSR #0
  STA .bss + 9        
  LDA .bss + 14
  ADI 1               
  STA .__arg1
  LDI 10
  STA .__arg2
  JSR #0
  PHA
  LDI 10
  PHA
  JSR #0
  ADI 10              
  STA .bss + 14
  RET
write_40_dash:
  LDI 0
  STA .bss
write_char_loop:
  LDA .linechar
  JSR #0
  LDA .bss
  ADI 1
  STA .bss
  CPI 40
  JPC end_wc_loop
  JMP write_char_loop
end_wc_loop:
  JSR #0
  RET
print_newline:
  PHA
  JSR #0
  RET
print_no_newline:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET

--- Encode into memory ---

  LDI .__sys_bits_avail_text_2  , mem_ins == 0, check if correct

--- Assembled program ---



 ------ Assembling snippet: parsenum ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22645
parse_number:
  PLA                 
  MOVAB               
  PLA
  STA .bss + 3        
  MOVBA               
  PHA                 
  LDI 0
  STA .bss
pn_loop:
  LPA .bss + 3        
  CPI 48              
  JPC pn_ge_48
  JMP pn_done
pn_ge_48:
  CPI 58              
  JPC pn_done
  SUI 48
  STA .bss + 2        
  LDA .bss
  LSA
  STA .bss + 1        
  LSA
  LSA                 
  ADD .bss + 1        
  ADD .bss + 2
  STA .bss
  LDA .bss + 3
  ADI 1
  STA .bss + 3
  JMP pn_loop
pn_done:
  LDA .bss + 3
  STA .__arg1
  LDA .bss
  STA .__res1
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: peek ------

--- Assembling ---

__argv_base = 2400
__argv_buf = 2500
peek:
  LDA .__argv_base
  CPI 0
  JPZ pk_end
  LDA .__argv_base + 1      
  PHA
  JSR #0
  LAP                     
  JSR #0
  JSR #0
pk_end:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: poke ------

--- Assembling ---

__argv_base = 2400
__argv_buf = 2500
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22649
reserved_region_text = 29232
.reserved_region_text = "Reserved region - poke not allowed!"
address = .bss + 1
value   = .bss + 2
poke:
  LDA .__argv_base
  CPI 2
  JPC pk_ok
  RET
pk_ok:
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .address
pk_paddr_done:
  LDA .__argv_base + 2
  PHA
  JSR #0
  STA .value
pk_pval_done:
  LDA .address
  CMP .__sys_reserved_region_end  
  JPC pk_ok_reserved        
  LDI .reserved_region_text
  PHA
  JSR #0
  RET
pk_ok_reserved:
  PHA
  LDA .value
  SAS
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: pow ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22652
pow:
  PLA                     
  MOVAB                   
  PLA
  STA .bss + 2            
  PLA
  STA .bss + 1            
  MOVBA                   
  PHA                     
  LDA .bss + 2
  CPI 0
  JPZ pow_one
  LDI 1
  STA .__res1
pow_loop:
  LDA .bss + 2
  CPI 0
  JPZ pow_done
  LDA .__res1
  PHA
  LDA .bss + 1
  PHA
  JSR #0
  STA .__res1
  LDA .bss + 2
  SUI 1
  STA .bss + 2
  JNZ pow_loop
  JMP pow_done
pow_one:
  LDI 1
  STA .__res1
pow_done:
  LDA .__res1
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: pow232 ------

--- Assembling ---

bss = 22655
mod =     bss + 0
r =       bss + 1
counter = bss + 2
pow2_32_mod:
  PLA             
  MOVAB           
  PLA             
  STA .mod       
  MOVBA           
  PHA             
  LDI 1
  STA .r          
  LDI 32
  STA .counter
p2_loop:
  CPI 0
  JPZ p2_done
  LDA .r
  ADD .r
  STA .r
  CMP .mod
  JPC p2_sub
  JMP p2_next
p2_sub:
  SUB .mod
  STA .r
p2_next:
  LDA .counter
  SUI 1
  STA .counter
  JNZ p2_loop
p2_done:
  LDA .r
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: primes ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22657
main:
begin:
  LDI 2
  JSR #0
  JSR #0
  LDI 3
  STA .bss
main_loop:
  LDA .bss
  CPI 301
  JPC done
  JSR check_prime_os
  LDA .bss
  ADI 2
  STA .bss
  JMP main_loop
done:
  RET
check_prime_os:
  LDA .bss
  RSA
  STA .bss + 2
  LDI 3
  STA .bss + 1
prime_loop_os:
  LDA .bss + 1
  CMP .bss + 2
  JPC prime_os
  LDA .bss
  STA .__arg1
  LDA .bss + 1
  STA .__arg2
  JSR #0
  LDA .__res2
  CPI 0
  JPZ not_prime_os
  LDA .bss + 1
  ADI 2
  STA .bss + 1
  JMP prime_loop_os
not_prime_os:
  RET
prime_os:
  LDA .bss
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: print ------

--- Assembling ---

bss = 22660
input_string_pointer = .bss + 0
print_skip_newline   = .bss + 1
max_length           = .bss + 2
chars_printed        = .bss + 3
print:
  PLA                       
  MOVAB                     
  PLA                       
  STA .max_length           
  PLA                       
  STA .print_skip_newline   
  PLA                       
  STA .input_string_pointer 
  MOVBA                     
  PHA                       
  LDI 0
  STA .chars_printed
lp:
  LPA .input_string_pointer                 
  CPI 0
  JPZ end                                   
  CPI 10
  JPZ print_newline                         
  CPI 13
  JPZ print_newline                         
  JSR #0
  JMP print_next
print_newline:
  JSR #0
print_next:
  LDA .input_string_pointer
  ADI 1
  STA .input_string_pointer
  LDA .chars_printed
  ADI 1
  STA .chars_printed 
  CMP .max_length       
  JPZ end               
  JMP lp
end:
  LDA .print_skip_newline
  CPI 1
  JPZ return
  JSR #0
return:
  LDA .chars_printed
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: printez ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22664
input_string_pointer = .bss + 0
print:
  PLA                       
  MOVAB                     
  PLA                       
  STA .input_string_pointer 
  MOVBA                     
  PHA                       
  LDA .input_string_pointer
  PHA                       
  LDI 0                     
  PHA                       
  PHA                       
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: printf ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
bss = 22666
string_pointer  = .bss + 0
args_pointer    = .bss + 1
chars_printed   = .bss + 2
_tmp            = .bss + 3
_saved_arg      = .bss + 4
printf:
  PLA                       
  MOVAB                     
  PLA                       
  STA .args_pointer         
  PLA                       
  STA .string_pointer       
  MOVBA                     
  PHA                       
  LDI 0
  STA .chars_printed
lp:
  LPA .string_pointer                 
  CPI 0
  JPZ end                             
  CPI 37                              
  JNZ print_char                      
  JSR increment_string_pointer
  LPA .string_pointer                 
  CPI 0
  JPZ end                             
  CPI 100                             
  JPZ print_signed_decimal
  CPI 117                             
  JPZ print_unsigned_decimal
  CPI 120                             
  JPZ print_hexadecimal
  CPI 115                             
  JPZ print_string
  CPI 37                              
  JPZ print_percent
  STA ._tmp                           
  LDI 37                              
  JSR #0
  JSR increment_counter
  LDA ._tmp
  JSR #0
  JSR increment_counter
  JSR increment_string_pointer
  JMP lp
print_char:                           
  JSR #0
  JSR increment_string_pointer
  JSR increment_counter
  JMP lp
print_percent:
  LDI 37                              
  JSR #0
  JSR increment_counter
  JSR increment_string_pointer
  JMP lp
print_string:
  LPA .args_pointer                   
  PHA                                 
  LDI 1                               
  PHA
  LDI 0                               
  PHA
  JSR #0
  ADD .chars_printed
  STA .chars_printed
  JSR increment_args_pointer
  JSR increment_string_pointer
  JMP lp
print_unsigned_decimal:
  LPA .args_pointer                   
  STA ._saved_arg
  LDA ._saved_arg
  JSR #0
  LDA .chars_printed
  ADD .__res3
  STA .chars_printed
  JSR increment_args_pointer
  JSR increment_string_pointer
  JMP lp
print_hexadecimal:
  LPA .args_pointer                   
  STA ._saved_arg
  JSR #0
  LDA .chars_printed
  ADD .__res3
  STA .chars_printed
  JSR increment_args_pointer
  JSR increment_string_pointer
  JMP lp
print_signed_decimal:
  LPA .args_pointer                   
  STA ._saved_arg
  JSR #0
  LDA .chars_printed
  ADD .__res3
  STA .chars_printed
  JSR increment_args_pointer
  JSR increment_string_pointer
  JMP lp
increment_counter:
  LDA .chars_printed
  ADI 1
  STA .chars_printed
  RET
increment_args_pointer:
  LDA .args_pointer
  ADI 1
  STA .args_pointer
  RET
increment_string_pointer:
  LDA .string_pointer
  ADI 1
  STA .string_pointer
  RET
end:
  JSR #0
  LDA .chars_printed
  ADI 1
  STA .chars_printed
  LDA .chars_printed
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: puzzle ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22671
bss         
bss + 1     
bss + 2     
bss + 3     
bss + 4     
bss + 5     
bss + 6     
bss + 7     
bss + 8     
bss + 9     
main:
  LDI 4
  STA .bss + 8       
  LDI 0
  STA .bss + 9       
  LDI 3
  STA .bss    
  LDI 1
  STA .bss + 6
  LDI 232
  STA .bss + 7
main_loop:
  JSR check_prime_os
  CPI 0
  JPZ next_val
its_prime:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
  OUT
  CPI 500000
  JPC done
  LDA .bss
  STA .__arg1              
  LDI .bss               
  ADI 8
  STA .__arg2              
  LDI .bss
  ADI 9
  STA .__res1              
  JSR #0
  LDA .bss + 8
  STA .__arg1              
  LDA .bss + 9
  STA .__arg2              
  LDA .bss + 6
  STA .__res1              
  JSR #0
  CPI 0
  JPZ found_one
  JMP next_val
found_one:
  LDA .bss + 6
  JSR #0
  JSR #0
  LDA .bss + 7
  PHA
  LDA .bss + 6
  SAS
  LDA .bss + 7
  ADI 1
  STA .bss + 7
next_val:
  LDA .bss
  ADI 2
  STA .bss    
  JMP main_loop
check_prime_os:
  LDA .bss
  PHA
  JSR #0
  PLA
  PLA
  PLA
  STA .bss + 2        
  LDI 3
  STA .bss + 1
prime_loop_os:
  LDA .bss + 1        
  CMP .bss + 2        
  JPC pl_check_eq     
  JMP pl_do_div       
pl_check_eq:
  JPZ pl_do_div       
  JMP prime_os        
pl_do_div:
  LDA .bss            
  STA .__arg1
  LDA .bss + 1        
  STA .__arg2
  JSR #0
  LDA .__res2
  CPI 0
  JPZ not_prime_os
  LDA .bss + 1
  ADI 2
  STA .bss + 1
  JMP prime_loop_os
not_prime_os:
  LDI 0
  RET
prime_os:
  LDI 1
  RET
done:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: q7_8_div ------

--- Assembling ---

__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22681
a_val   = .bss + 0
b_val   = .bss + 1
sign    = .bss + 2
mag_a   = .bss + 3
mag_b   = .bss + 4
num     = .bss + 5
mask    = .bss + 6
cnt     = .bss + 7
q7_8_div:
  PLA
  MOVAB
  PLA
  STA .a_val
  PLA
  STA .b_val
  MOVBA
  PHA
  LDI 1
  STA .mask
  LDA .__sys_bits_avail
  SUI 1
  STA .cnt
qd_mask_loop:
  LDA .cnt
  CPI 0
  JPZ qd_mask_done
  LDA .mask
  LSA
  STA .mask
  LDA .cnt
  SUI 1
  STA .cnt
  JMP qd_mask_loop
qd_mask_done:
  LDA .a_val
  CMP .mask
  JPC qd_a_neg
  LDI 0
  STA .sign
  JMP qd_test_b
qd_a_neg:
  LDI 1
  STA .sign
qd_test_b:
  LDA .b_val
  CMP .mask
  JPC qd_b_neg
  JMP qd_abs
qd_b_neg:
  LDA .sign
  CPI 0
  JPZ qd_set1
  LDI 0
  STA .sign
  JMP qd_abs
qd_set1:
  LDI 1
  STA .sign
qd_abs:
  LDA .a_val
  CMP .mask
  JPC qd_abs_a_neg
  STA .mag_a
  JMP qd_abs_b
qd_abs_a_neg:
  LDI 0
  SUB .a_val
  STA .mag_a
qd_abs_b:
  LDA .b_val
  CMP .mask
  JPC qd_abs_b_neg
  STA .mag_b
  JMP qd_div
qd_abs_b_neg:
  LDI 0
  SUB .b_val
  STA .mag_b
  LDA .mag_b
  CPI 0
  JPZ qd_div_zero
qd_div:
  LDA .mag_a
  STA .__arg1
  LDA .mag_b
  STA .__arg2
  JSR #0
  STA .num       
  LDA .__res2
  STA .a_val     
  LDI 0
  STA .mask      
  LDI 8
  STA .cnt
qd_frac_loop:
  LDA .cnt
  CPI 0
  JPZ qd_round_frac
  LDA .mask
  LSA
  STA .mask
  LDA .a_val
  LSA
  STA .a_val
  LDA .a_val
  CMP .mag_b
  JPC qd_set_bit
  LDA .cnt
  SUI 1
  STA .cnt
  JMP qd_frac_loop
qd_set_bit:
  LDA .a_val
  SUB .mag_b
  STA .a_val
  LDA .mask
  ADI 1
  STA .mask
  LDA .cnt
  SUI 1
  STA .cnt
  JMP qd_frac_loop
qd_round_frac:
  LDA .a_val
  LSA
  CMP .mag_b
  JPC qd_inc_frac
  JMP qd_combine
qd_inc_frac:
  LDA .mask
  ADI 1
  JPZ qd_frac_overflow
  STA .mask
  JMP qd_combine
qd_frac_overflow:
  STA .mask      
  LDA .num
  ADI 1
  STA .num
qd_combine:
  LDA .num
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  LSA
  ADD .mask
  STA .num
qd_apply_sign:
  LDA .sign
  CPI 0
  JPZ qd_ret_pos
  LDI 0
  SUB .num
  RET
qd_ret_pos:
  LDA .num
  RET
qd_div_zero:
  LDI 0
  RET

--- Encode into memory ---

  STA .__arg1, mem_ins == 0, check if correct
  STA .__arg2, mem_ins == 0, check if correct
  LDA .__res2, mem_ins == 0, check if correct

--- Assembled program ---



 ------ Assembling snippet: q7_8_mul ------

--- Assembling ---

__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22689
a_val   = .bss + 0
b_val   = .bss + 1
sign    = .bss + 2      
mag_a   = .bss + 3
mag_b   = .bss + 4
prod    = .bss + 5      
mask    = .bss + 6      
cnt     = .bss + 7
q7_8_mul:
  PLA
  MOVAB
  PLA
  STA .a_val
  PLA
  STA .b_val
  MOVBA
  PHA
  LDI 1
  STA .mask
  LDA .__sys_bits_avail
  SUI 1
  STA .cnt
qm_mask_loop:
  LDA .cnt
  CPI 0
  JPZ qm_mask_done
  LDA .mask
  LSA
  STA .mask
  LDA .cnt
  SUI 1
  STA .cnt
  JMP qm_mask_loop
qm_mask_done:
  LDA .a_val
  CMP .mask
  JPC qm_a_neg
  LDI 0
  STA .sign
  JMP qm_test_b
qm_a_neg:
  LDI 1
  STA .sign
qm_test_b:
  LDA .b_val
  CMP .mask
  JPC qm_b_neg
  JMP qm_abs
qm_b_neg:
  LDA .sign
  CPI 0
  JPZ qm_set1
  LDI 0
  STA .sign
  JMP qm_abs
qm_set1:
  LDI 1
  STA .sign
qm_abs:
  LDA .a_val
  CMP .mask
  JPC qm_abs_a_neg
  STA .mag_a
  JMP qm_abs_b
qm_abs_a_neg:
  LDI 0
  SUB .a_val
  STA .mag_a
qm_abs_b:
  LDA .b_val
  CMP .mask
  JPC qm_abs_b_neg
  STA .mag_b
  JMP qm_mul
qm_abs_b_neg:
  LDI 0
  SUB .b_val
  STA .mag_b
qm_mul:
  LDA .mag_b
  PHA
  LDA .mag_a
  PHA
  JSR #0
  STA .prod
  LDA .prod
  ADI 128
  STA .prod
  LDA .prod
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  STA .prod
  LDA .sign
  CPI 0
  JPZ qm_ret_pos
  LDI 0
  SUB .prod
  RET
qm_ret_pos:
  LDA .prod
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: randint ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22697
randint:
  PLA
  MOVAB
  PLA
  STA .bss + 0        
  MOVBA
  PHA
  LDA .bss + 0
  CPI 0
  JPZ ri_zero
  LDA .__sys_bits_avail
  CPI 32
  JPC ri_32
ri_16:
  LDA .__random_seed
  PHA
  LDI 25173
  PHA
  JSR #0
  ADI 13849
  STA .__arg1
  STA .__random_seed
  LDA .bss
  STA .__arg2
  JSR #0
  LDA .__res2
  RET
ri_32:
  LDA .__random_seed
  PHA
  LDI 1664525
  PHA
  JSR #0
  ADI 1013904223
  STA .__arg1
  STA .__random_seed
  LDA .bss
  STA .__arg2
  JSR #0
  LDA .__res2
  RET
ri_zero:
  LDI 0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: rem64 ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22699
rem64:
  LDA .__res1
  STA .bss
  LDA .__arg1
  STA .bss + 5      
  LDA .__arg2
  STA .bss + 6      
  LDA .bss + 5
  STA .__arg1
  LDA .bss
  STA .__arg2
  JSR #0
  LDA .__res2
  STA .bss + 1
  LDA .bss + 6
  STA .__arg1
  LDA .bss
  STA .__arg2
  JSR #0
  LDA .__res2
  STA .bss + 2
  LDA .bss
  PHA
  JSR #0
  STA .bss + 3
  LDA .bss + 2
  STA .__arg1
  LDA .bss + 3
  STA .__arg2
  LDA .bss
  STA .__res1
  JSR #0
  STA .bss + 4
  ADD .bss + 1
  CMP .bss
  JPC r_sub
  RET
r_sub:
  SUB .bss
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: run ------

--- Assembling ---

__argv_base = 2400
__argv_buf = 2500
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22706
error_message = 29296
.error_message = " Error: Address invalid/reserved region "
run:
  LDA .__argv_base
  CPI 1
  JPC rn_have_arg
  RET
rn_have_arg:
  LDA 19997
  STA .bss
  LDA .__argv_base + 1
  PHA
  JSR #0
  CMP .__sys_reserved_region_end
  JPC rn_ok_addr
  JMP rn_error                
rn_ok_addr:
  STA 19997                   
  JSR #19996
  LDA .bss
  STA 19997
  RET
rn_error:
  LDI .error_message
  PHA
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: skipline ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
skip_line:
  LDI 0
  STA .__res1
  STA .__res2
sl_loop:
  LPA .__arg1                
  CPI 0
  JPZ sl_end        
  CPI 92            
  JPZ sl_backslash
  CPI 10            
  JPZ sl_newline_literal
  LDA .__arg1         
  ADI 1
  STA .__arg1
  LDA .__res1
  ADI 1
  STA .__res1
  STA .__res2
  JMP sl_loop
sl_backslash:
  LDA .__arg1
  ADI 1
  LAP
  CPI 78            
  JPZ sl_newline
  LDA .__arg1
  ADI 2             
  STA .__arg1
  LDA .__res1
  ADI 2             
  STA .__res1
  STA .__res2
  JMP sl_loop
sl_newline:                 
  LDA .__arg1
  ADI 1
  STA .__arg1
  LDA .__res2
  ADI 1
  STA .__res2
sl_newline_literal:         
  LDA .__arg1
  ADI 1
  STA .__arg1
  LDA .__res2
  ADI 1
  STA .__res2
sl_end:
  LDA .__arg1
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: split ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22708
array       = .bss + 0      
counter     = .bss + 160    
write_ptr   = .bss + 161    
sep_char    = .bss + 162    
read_ptr    = .bss + 163    
return_addr = .bss + 164    
entries     = .bss + 165    
split: 
  LDI 0
  STA .counter
  LDI .array            
  STA .write_ptr
  LDI 0
  STA .entries
get_args:
  PLA                
  STA .return_addr   
  PLA                
  STA .sep_char      
  PLA                
  STA .read_ptr      
buf_loop:
  LPA .read_ptr               
  CPI 0
  JPZ end                     
  CMP .sep_char               
  JNZ buf_continue            
  JSR match                   
buf_continue:
  LDA .read_ptr              
  ADI 1
  STA .read_ptr              
  LDA .counter
  ADI 1
  STA .counter
  JMP buf_loop
match:
  LDA .entries
  CPI 160
  JPZ match_skip         
  LDA .write_ptr
  PHA                         
  LDA .counter
  SAS                         
  LDA .write_ptr
  ADI 1                       
  STA .write_ptr
  LDA .entries
  ADI 1
  STA .entries
  RET
match_skip:
  RET
end:
  LDA .entries
  PHA
  LDI .array                  
  PHA
  LDA .return_addr
  PHA
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: sqrt ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22874
sqrt:
  PLA                     
  STA .bss + 3            
  PLA
  STA .bss          
  LDI 1
  STA .bss + 1      
  LDI 0
  STA .bss + 2      
sqrt_loop:
  LDA .bss          
  CMP .bss + 1      
  JPC sqrt_ge       
  JMP sqrt_done
sqrt_ge:
  LDA .bss
  SUB .bss + 1
  STA .bss
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  LDA .bss + 1
  ADI 2
  STA .bss + 1
  JMP sqrt_loop
sqrt_done:
  LDA .bss + 2
  PHA
  LDA .bss
  PHA
  LDA .bss + 1
  SUB .bss
  PHA
  LDA .bss + 3
  PHA
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: strcompare ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22878
string_compare:
  PLA               
  MOVAB             
  PLA
  STA .bss + 1
  PLA
  STA .bss + 2
  MOVBA             
  PHA               
compare_loop:
  LPA .bss + 1      
  STA .bss
  LPA .bss + 2      
  CMP .bss          
  JPZ equal
  JMP not_equal
equal:
  CPI 0             
  JPZ done_equal
  LDA .bss + 1
  ADI 1
  STA .bss + 1
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  JMP compare_loop
not_equal:
  LDI 0
  RET
done_equal:
  LDI 1
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: ted ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22881
mode_text = 29360
wc_text = 29367
lc_text = 29373
mode0_text = 29379
mode1_text = 29386
mode2_text = 29394
compiling_text = 29402
screen_height_sub1 = bss + 14
.mode_text = "Mode: "
.wc_text = "  wc="
.lc_text = "  lc="
.mode0_text = "insert"
.mode1_text = "command"
.mode2_text = "spchars"
.compiling_text = "Compiling to mem[%u:]"
ted_start:
  LDA .__sys_screen_height
  SUI 1
  STA .screen_height_sub1
  LDA .__argv_base
  CPI 1
  JPC ted_go
  RET
ted_go:
  LDI 0
  STA .__argv_base        
  STA .bss + 1
  STA .bss + 4
  STA .bss + 5
  STA .bss + 6
  STA .bss + 7
  STA .bss + 8
  STA .bss + 9
  LDI 1
  STA .bss + 12         
  LDA .__argv_base + 1
  PHA
  JSR #0
  STA .bss + 0
  JSR count_lines
  JSR update_display
main_loop:
  JSR check_input
  LDA .bss + 10
  CPI 0
  JPZ set_no_input
  LDA .bss + 12
  CPI 1
  JPZ main_loop             
  LDI 1
  STA .bss + 12             
  LDA .bss + 11
  CPI 44                    
  JPZ handle_ctrl
  CPI 46                    
  JPZ handle_shift
  LDA .bss + 9
  CPI 1
  JPZ command_handling
  CPI 2
  JPZ specials_handling
  LDA .bss + 11
  CPI 42
  JPZ handle_up
  CPI 53
  JPZ handle_down
  CPI 52
  JPZ handle_left
  CPI 54
  JPZ handle_right
  CPI 31
  JPZ handle_enter
  CPI 32
  JPZ handle_enter
  CPI 43
  JPZ handle_backspace
  ADD .__ascii_start
  LAP
insert_char_ml:
  STA .__char
  JSR insert_character
  LDA .bss + 7
  ADI 1
  STA .bss + 7
  JSR count_lines
  LDI 1
  STA .__res1
post_key_input:
  LDA .__res1
  CPI 1
  JPZ refresh_screen
  JSR move_cursor_pointer   
  JMP main_loop
refresh_screen:
  JSR update_display
  JMP main_loop
  RET
command_handling:
  LDA .bss + 11
  CPI 11                    
  JPZ exit
  CPI 35                    
  JPZ compile
  JMP main_loop
specials_handling:
  LDI 0
  STA .bss + 9
  LDA .bss + 11
  CPI 20                    
  JPZ add_pct
  CPI 2                     
  JPZ add_quote
  JMP main_loop
add_pct:
  LDI 37                    
  JMP insert_char_ml
add_quote:
  LDI 34                    
  JMP insert_char_ml
set_no_input:
  LDI 0
  STA .bss + 12
  JMP main_loop
handle_ctrl:
  LDI 1
  STA .__res1
  LDA .bss + 9
  CPI 0
  JPZ set_mode_1      
  CPI 2
  JPZ set_mode_1      
  JMP set_mode_0
set_mode_1:
  LDI 1
  STA .bss + 9
  JMP post_key_input
handle_shift:
  LDI 1
  STA .__res1
  LDA .bss + 9
  CPI 1
  JPZ set_mode_2
  CPI 0
  JPZ set_mode_2
  JMP set_mode_0
set_mode_2:
  LDI 2
  STA .bss + 9
  JMP post_key_input
set_mode_0:
  LDI 0
  STA .bss + 9
  JMP post_key_input
compile:
  JSR clear_display
  LDI .compiling_text
  PHA
  LDA .bss + 0
  ADD .bss + 2
  ADI 2
  STA .bss + 13
  LDI .bss + 13
  PHA
  JSR #0
  LDA .bss + 0
  STA .__arg1
  LDA .bss + 13
  STA .__arg2
  JSR #0
  RET
exit:
  JSR clear_display
  RET
handle_enter:
  LDI 10                  
  STA .__char
  JSR insert_character
  JSR count_lines
  LDI 0
  STA .bss + 7            
  LDA .bss + 4
  ADD .bss + 6            
  ADI 1                   
  CMP .bss + 3
  JPC he_set_refresh      
  LDA .__sys_screen_height
  SUI 3
  CMP .bss + 6
  JPC he_add_y_check
  LDA .bss + 4
  ADI 1                   
  STA .bss + 4
  JMP he_set_refresh
he_add_y_check:
  LDA .bss + 3
  SUB .bss + 4
  CMP .bss + 6
  JPZ he_increment_y
he_increment_y:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
he_set_refresh:
  LDI 1
  STA .__res1
  JMP post_key_input
handle_backspace:
  LDA .bss + 7          
  CPI 0
  JPZ hb_line_start
  LDA .bss + 1          
  CPI 0
  JPZ post_key_input
  LDA .bss + 1
  STA .__work2            
  LDA .bss + 0
  ADD .__work2
  STA .__arg1             
  LDA .__arg1
  SUI 1
  STA .__arg2             
  LDI 1
  STA .__work1            
  LPA .__arg2                
  STA .__char             
  CPI 92                
  JPZ hb_prev_backslash
  JMP hb_delete_prev
hb_prev_backslash:
  LPA .__arg1                
  CPI 92
  JPZ hb_set_double_delete
  LDA .__work2
  CPI 2
  JPC hb_check_prev_byte
  JMP hb_delete_prev
hb_check_prev_byte:
  LDA .__arg2
  SUI 1
  LAP
  CPI 92
  JPZ hb_set_double_delete
  JMP hb_delete_prev
hb_set_double_delete:
  LDI 2
  STA .__work1
hb_delete_prev:
  LDA .bss + 2
  SUB .__work2
  ADI 1
  STA .__num_digits       
  LDA .__work1
  CPI 2
  JPZ hb_adjust_dest_two
  JMP hb_copy_tail
hb_adjust_dest_two:
  LDA .__arg2
  SUI 1
  STA .__arg2             
hb_copy_tail:
  JSR #0
  JSR count_lines
  LDI 1
  STA .__res1
  LDA .__work2
  SUI 1
  STA .bss + 1          
  LDA .__work1
  CPI 2
  JPZ hb_dec_ptr_extra
  JMP hb_update_cursor_x
hb_dec_ptr_extra:
  LDA .bss + 1
  SUI 1
  STA .bss + 1
hb_update_cursor_x:
  LDA .bss + 7
  SUI 1
  STA .bss + 7
  JMP post_key_input
hb_line_start:
  LDA .bss + 1          
  CPI 0
  JPZ post_key_input
  LDA .bss + 6
  CPI 0
  JPZ hb_ls_check_scroll
  SUI 1
  STA .bss + 6
  JMP hb_ls_after_move
hb_ls_check_scroll:
  LDA .bss + 4
  CPI 0
  JPZ post_key_input
  SUI 1
  STA .bss + 4
hb_ls_after_move:
  LDI 255
  STA .bss + 7
  JSR move_cursor_pointer
  LDA .bss + 0
  ADD .bss + 1
  LAP
  STA .__char             
  CPI 0
  JPZ hb_no_break
  CPI 92                
  JPZ hb_break_escape
  CPI 10                
  JPZ hb_break_literal
  JMP hb_no_break
hb_break_literal:
  LDI 1
  STA .__work1
  JMP hb_delete_merge
hb_break_escape:
  LDA .bss + 0
  ADD .bss + 1
  ADI 1
  LAP
  CPI 78                
  JPZ hb_set_break_two
  CPI 92                
  JPZ hb_set_break_two
  LDI 1
  STA .__work1
  JMP hb_delete_merge
hb_set_break_two:
  LDI 2
  STA .__work1
  JMP hb_delete_merge
hb_no_break:
  LDI 1
  STA .__res1             
  JMP post_key_input
hb_delete_merge:
  LDA .bss + 0
  ADD .bss + 1
  STA .__arg2             
  LDA .__work1
  CPI 2
  JPZ hb_set_src_plus2
hb_set_src_plus1:
  LDA .__arg2
  ADI 1
  STA .__arg1
  JMP hb_calc_tail
hb_set_src_plus2:
  LDA .__arg2
  ADI 2
  STA .__arg1
hb_calc_tail:
  LDA .bss + 2
  SUB .bss + 1
  SUB .__work1
  ADI 1
  STA .__num_digits
  JSR #0
  JSR count_lines
  LDI 1
  STA .__res1
  JMP post_key_input
insert_character:   
  LDA .bss + 0          
  ADD .bss + 1          
  STA .__arg1             
  ADI 1
  STA .__arg2             
  LDA .bss + 2
  SUB .bss + 1
  ADI 1
  STA .__num_digits
  JSR #0
  LDA .bss + 0
  ADD .bss + 1
  PHA                   
  LDA .__char
  SAS                   
  RET
handle_left:
  LDI 0
  STA .__res1
  LDA .bss + 7
  CPI 0
  JPZ post_key_input
  SUI 1
  STA .bss + 7
  JMP post_key_input
handle_right:
  LDI 0
  STA .__res1
  LDA .bss + 7
  ADI 1
  STA .bss + 7          
  JMP post_key_input
handle_up:
  LDI 0
  STA .__res1
  LDA .bss + 6
  CPI 1
  JPC sub_y
  LDA .bss + 4                      
  CPI 1
  JPC sub_lineskip
  JMP post_key_input                
sub_lineskip:
  SUI 1
  STA .bss + 4
  LDI 1
  STA .__res1                         
  JMP post_key_input
sub_y:
  SUI 1
  STA .bss + 6
  JMP post_key_input
handle_down:
  LDI 0
  STA .__res1
  LDA .bss + 4
  ADD .bss + 6                      
  ADI 1
  CMP .bss + 3                      
  JPC post_key_input                
  LDA .__sys_screen_height
  SUI 3
  CMP .bss + 6
  JPC add_y_check                   
  LDA .bss + 4
  ADI 1                             
  STA .bss + 4
  LDI 1
  STA .__res1
  JMP post_key_input
add_y_check:
  LDA .bss + 3                      
  SUB .bss + 4                      
  CMP .bss + 6
  JPZ add_y                         
add_y:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
  JMP post_key_input
update_display:
  LDI 0
  STA .bss + 1          
  STA .bss + 5          
  LDA .bss + 4
  STA .__work1
  JSR clear_display
skip_lines_loop:
  LDA .__work1
  CPI 0
  JPZ end_skip_lines    
  LDA .bss + 0
  ADD .bss + 5          
  STA .__arg1
  JSR #0
  LDA .bss + 5
  ADD .__res2             
  STA .bss + 5
  LDA .__work1
  SUI 1                 
  STA .__work1
  JMP skip_lines_loop
end_skip_lines:
  LDA .bss + 5
  ADD .bss + 0
  STA .__arg1
  LDI 20
  STA .__arg2
  LDI 1
  STA .__res1
  JSR #0
skip_to_bottom_row_loop:
  LDA .__res2
  CMP .screen_height_sub1
  JPC end_bottom_row_loop
  JSR #0
  ADI 1
  STA .__res2
  JMP skip_to_bottom_row_loop
end_bottom_row_loop:
  LDI .mode_text
  JSR print_no_newline
  LDA .bss + 9
  CPI 0
  JPZ print_mode0_text
  CPI 2
  JPZ print_mode2_text
print_mode1_text:
  LDI .mode1_text
  JSR print_no_newline
  JMP end_mode_text
print_mode2_text:
  LDI .mode2_text
  JSR print_no_newline
  JMP end_mode_text
print_mode0_text:
  LDI .mode0_text
  JSR print_no_newline
end_mode_text:
  LDI .wc_text
  JSR print_no_newline
  LDA .bss + 2
  JSR #0
  LDI .lc_text
  JSR print_no_newline
  LDA .bss + 3
  JSR #0
move_cursor_pointer:    
  DIS 2                 
  JSR #0
  LDA .bss + 5
  STA .bss + 1          
  LDA .bss + 6
  STA .__work1
mcp_loop:
  LDA .__work1
  CPI 0
  JPZ end_mcp           
  LDA .bss + 0
  ADD .bss + 1          
  STA .__arg1
  JSR #0
  LDA .bss + 1
  ADD .__res2             
  STA .bss + 1
  LDA .__work1
  SUI 1                 
  STA .__work1
  DIS 20
  JSR #0
  JMP mcp_loop
end_mcp:
  LDA .bss + 0
  ADD .bss + 1
  STA .__arg1             
  JSR #0
  LDA .__res1             
  STA .bss + 8
  CMP .bss + 7          
  JPC no_clamp_x        
  STA .bss + 7          
no_clamp_x:
  LDA .bss + 1
  STA .__work2             
  LDA .bss + 7
  STA .__work1
mcp_byte_loop:
  LDA .__work1
  CPI 0
  JPZ mcp_bytes_done
  LDA .bss + 0
  ADD .__work2
  STA .__arg1
  LAP
  CPI 92                
  JPZ mcp_handle_escape
  CPI 10                
  JPZ mcp_advance_literal_newline
  LDA .__work2
  ADI 1
  STA .__work2
  JMP mcp_step_complete
mcp_handle_escape:
  LDA .bss + 0
  ADD .__work2
  ADI 1
  LAP
  CPI 78                
  JPZ mcp_advance_escape_two
  CPI 92                
  JPZ mcp_advance_escape_two
  LDA .__work2
  ADI 2
  STA .__work2
  JMP mcp_step_complete
mcp_advance_escape_two:
  LDA .__work2
  ADI 2
  STA .__work2
  JMP mcp_step_complete
mcp_advance_literal_newline:
  LDA .__work2
  ADI 1
  STA .__work2
mcp_step_complete:
  LDA .__work1
  SUI 1
  STA .__work1
  JMP mcp_byte_loop
mcp_bytes_done:
  LDA .__work2
  STA .bss + 1          
  OUT
  LDA .bss + 7
  STA .__work1
mcr_loop:               
  LDA .__work1
  CPI 0
  JPZ end_mcr_loop
  SUI 1
  STA .__work1
  DIS 17
  JSR #0
  JMP mcr_loop
end_mcr_loop:
  RET
check_input:
  KEI
  PHA
  CPI 128
  JPC input_entered     
  PLA
  LDI 0
  STA .bss + 10
  RET
input_entered:
  PLA
  SUI 128
  STA .bss + 11
  LDI 1
  STA .bss + 10
  RET
clear_display:
  DIS 1             
  JSR #0
  RET
count_lines:
  LDI 0
  STA .bss + 2
  STA .bss + 3
  STA .bss + 5
  STA .__work1           
  STA .__work2           
cl_loop:
  LDA .bss + 0
  ADD .bss + 5
  STA .__arg1
  JSR #0
  LDA .__res2
  CPI 0
  JPZ count_end
  LDI 0
  STA .__work1
  STA .__work2
  LDA .__res2
  STA .__work3
  LDA .__res1
  STA .__work4
  LDA .__work3
  SUB .__work4
  CPI 0
  JPZ cl_no_newline_flag
  LDI 1
  STA .__work1
cl_no_newline_flag:
  LDA .__work4
  CPI 0
  JPZ cl_no_chars_flag
  LDI 1
  STA .__work2
cl_no_chars_flag:
  LDA .bss + 3
  ADI 1             
  STA .bss + 3
  LDA .bss + 2
  ADD .__work3        
  STA .bss + 2
  STA .bss + 5      
  JMP cl_loop  
count_end:
  LDA .__work1
  CPI 1
  JPZ cl_maybe_add_blank
  JMP cl_finish
cl_maybe_add_blank:
  LDA .__work2
  CPI 1
  JPZ cl_add_blank
  JMP cl_finish
cl_add_blank:
  LDA .bss + 3
  ADI 1
  STA .bss + 3
cl_finish:
  RET
print_newline:
  PHA
  JSR #0
  RET
print_no_newline:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: tgetmnemonic ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
main:
  LDA .__argv_base
  CPI 1
  JPZ test_go
  RET
test_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: tgetosvar ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
main:
  LDA .__argv_base
  CPI 1
  JPZ test_go
  RET
test_go:
  LDA .__argv_base + 1
  PHA
  JSR #0
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: tgetprog ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
main:
  LDA .__argv_base
  CPI 1
  JPZ test_go
  RET
test_go:
  LDA .__argv_base + 1
  STA .__arg1
  JSR #0
  LDA .__res1
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: testlsa ------

--- Assembling ---

test_lsa:
  LDI 3
loop:
  LSA
  OUT
  JPC end
  JMP loop
end:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: testprintf ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22895
text_1 = 29440
text_2 = 29470
insert_string = 29491
.text_1 = "This %s has n=%d h=%x. 100%%!"
.text_2 = "Test with %u and %d."
.insert_string = "string"
args_1 = .bss
args_1_end = .bss + 3
args_2 = .bss + 4
args_2_end = .bss + 6
main:
  LDI .insert_string
  STA .args_1
  LDI 42
  STA .args_1 + 1
  STA .args_1 + 2     
  LDI 0
  STA .args_1 + 3
  LDI .text_1
  PHA
  LDI .args_1
  PHA
  JSR #0
  LDI 54000
  STA .args_2
  LDI 54000         
  STA .args_2 + 1
  LDI 0
  STA .args_2 + 2
  LDI .text_2
  PHA
  LDI .args_2
  PHA
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: testmem ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22902
largest_text = 29520
largest_text_2 = 29554
.largest_text = "Largest memory region with nulls:"
.largest_text_2 = "[%u, %u) Size: %u"
testmem:
  LDI 0
  STA .bss
  STA .bss + 1
  STA .bss + 2
  STA .bss + 3
  STA .bss + 4
  STA .bss + 5
  STA .bss + 6
  JMP check_zero
is_zero:
  LDA .bss + 6          
  CPI 1
  JPZ skip_startsite
  LDA .bss
  STA .bss + 1          
  LDI 1
  STA .bss + 6          
skip_startsite:
  LDA .bss
  ADI 1
  JPC end               
  STA .bss
  LDA .bss + 2
  ADI 1
  STA .bss + 2
check_zero:
  LPA .bss                
  CPI 0
  JPZ is_zero
not_zero:               
  LDA .bss              
  ADI 1
  JPC end               
  STA .bss
  LDA .bss + 6          
  CPI 1
  JPZ end_zero_region
  JMP check_zero        
end_zero_region:
  LDI 0
  STA .bss + 6
  LDI 100
  CMP .bss + 2          
  JPC skip_print
print_current:          
  JSR display_current
skip_print:
  LDA .bss + 2
  CMP .bss + 5
  JPC update_largest    
  LDI 0
  STA .bss + 2
  JMP check_zero
update_largest:
  LDA .bss + 1
  STA .bss + 3
  LDA .bss + 2
  STA .bss + 5
  LDI 0
  STA .bss + 2
  JMP check_zero
end:
  LDA .bss + 6
  CPI 1
  JPZ end_on_zero_region
  JMP print_largest
end_on_zero_region:
  JSR display_current
  LDA .bss + 5
  CMP .bss + 2
  JPC print_largest    
  LDA .bss + 1
  STA .bss + 3
  LDA .bss + 2
  STA .bss + 5
print_largest:
  LDI .largest_text
  JSR print_newline
  LDI .largest_text_2
  PHA
  LDI .bss + 3          
  PHA
  LDA .bss + 3
  ADD .bss + 5
  STA .bss + 4
  JSR #0
  RET
print_newline:
  PHA
  JSR #0
  RET
print_no_newline:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET
display_current:
  LDA .bss + 1
  JSR #0
  LDI 32
  JSR #0
  JSR #0
  JSR #0
  LDA .bss + 1
  ADD .bss + 2
  JSR #0
  LDI 32
  JSR #0
  JSR #0
  JSR #0
  LDA .bss + 2
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: tetris ------

--- Assembling ---

__char = 2000
__textloc = 2001
__arg1 = 2002
__arg2 = 2003
__res1 = 2004
__res2 = 2005
__res3 = 2014
__pow2 = 2006
__num_digits = 2007
__work1 = 2010
__work2 = 2011
__work3 = 2012
__work4 = 2013
__ascii_start = 2008
__no_input = 2009
__input_buf = 2122
__input_ptr = 2202
__cmd_len = 2203
__cmd_ready = 2204
__argv_base = 2400
__argv_buf = 2500
__random_seed = 2600
__inc_random_seed = 2601
__sys_bits_avail = 2602
__sys_screen_width = 2603
__sys_screen_height = 2604
__sys_prog_table = 3000
__sys_reserved_region_end = 2605
bss = 22909
title_text = 29600
score_text = 29607
lines_text = 29615
level_text = 29623
controls_line1 = 29631
controls_line2 = 29648
controls_line3 = 29664
controls_line4 = 29675
game_over_text = 29692
final_score_text = 29702
exit_text = 29716
piece_chars = 29736
i_rot0 = 29744
i_rot1 = 29761
i_rot2 = 29778
i_rot3 = 29795
o_rot0 = 29812
o_rot1 = 29829
o_rot2 = 29846
o_rot3 = 29863
t_rot0 = 29880
t_rot1 = 29897
t_rot2 = 29914
t_rot3 = 29931
s_rot0 = 29948
s_rot1 = 29965
s_rot2 = 29982
s_rot3 = 29999
z_rot0 = 30016
z_rot1 = 30033
z_rot2 = 30050
z_rot3 = 30067
j_rot0 = 30084
j_rot1 = 30101
j_rot2 = 30118
j_rot3 = 30135
l_rot0 = 30152
l_rot1 = 30169
l_rot2 = 30186
l_rot3 = 30203
board_width = 10
board_height = 20
board_size = 200
board_indent = 22
frame_delay = 1
initial_drop = 18
min_drop = 4
lines_per_level = 10
spawn_x = 3
last_row_index = 19
input_repeat_delay = 3
score_single = 100
score_double = 300
score_triple = 500
score_tetris = 800
space_char = 32
border_char = 124
.title_text = "TETRIS"
.score_text = "Score: "
.lines_text = "Lines: "
.level_text = "Level: "
.controls_line1 = "Left/Right: move"
.controls_line2 = "Down: soft drop"
.controls_line3 = "Up: rotate"
.controls_line4 = "Enter: hard drop"
.game_over_text = "GAME OVER"
.final_score_text = "Final score: "
.exit_text = "Press ENTER to exit"
.piece_chars = "IOTSZJL"
.i_rot0 = "XXXX............"
.i_rot1 = "X...X...X...X..."
.i_rot2 = "XXXX............"
.i_rot3 = "X...X...X...X..."
.o_rot0 = "XX..XX.........."
.o_rot1 = "XX..XX.........."
.o_rot2 = "XX..XX.........."
.o_rot3 = "XX..XX.........."
.t_rot0 = ".X..XXX........."
.t_rot1 = "X...XX..X......."
.t_rot2 = "XXX..X.........."
.t_rot3 = ".X..XX...X......"
.s_rot0 = ".XX.XX.........."
.s_rot1 = "X...XX...X......"
.s_rot2 = ".XX.XX.........."
.s_rot3 = "X...XX...X......"
.z_rot0 = "XX...XX........."
.z_rot1 = ".X..XX..X......."
.z_rot2 = "XX...XX........."
.z_rot3 = ".X..XX..X......."
.j_rot0 = "X...XXX........."
.j_rot1 = ".X...X..XX......" 
.j_rot2 = "XXX...X........."  
.j_rot3 = "XX..X...X......."
.l_rot0 = "..X.XXX........."
.l_rot1 = "X...X...XX......"
.l_rot2 = "XXX.X..........."
.l_rot3 = "XX...X...X......"
main:
  DIS 8
  JSR #0
  JSR reset_game
  JSR spawn_new_piece
  JSR update_display
main_loop:
  JSR frame_wait
  LDA .bss + 209
  CPI 0
  JPZ game_over
  JSR drop_tick
  JSR maybe_render
  JMP main_loop
game_over:
  JSR render_game_over
  RET
reset_game:
  JSR clear_board
  JSR clear_display
  LDI 0
  STA .bss + 204
  STA .bss + 205
  STA .bss + 201
  STA .bss + 210
  STA .bss + 211
  STA .bss + 212
  STA .bss + 215
  STA .bss + 213
  STA .bss + 214
  STA .bss + 260
  STA .bss + 261
  LDI .spawn_x
  STA .bss + 202
  LDI 0
  STA .bss + 203
  LDI 1
  STA .bss + 206
  LDI .initial_drop
  STA .bss + 208
  STA .bss + 207
  LDI 1
  STA .bss + 209
  LDI 1
  STA .bss + 212
  RET
clear_board:
  LDI .bss
  STA .bss + 228
  LDI .board_size
  STA .bss + 216
cb_loop:
  LDA .bss + 216
  CPI 0
  JPZ cb_done
  LDA .bss + 228
  PHA
  LDI 0
  SAS
  LDA .bss + 228
  ADI 1
  STA .bss + 228
  LDA .bss + 216
  SUI 1
  STA .bss + 216
  JMP cb_loop
cb_done:
  RET
spawn_new_piece:
  LDI 7
  PHA
  JSR #0
  STA .bss + 200
  LDI 0
  STA .bss + 201
  LDI .spawn_x
  STA .bss + 202
  LDI 0
  STA .bss + 203
  LDA .bss + 200
  STA .bss + 218
  LDI 0
  STA .bss + 215
  JSR build_offsets_temp
  LDA .bss + 202
  STA .bss + 213
  LDA .bss + 203
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ snp_place_ok
  LDI 0
  STA .bss + 209
  LDI 1
  STA .bss + 212
  RET
snp_place_ok:
  JSR copy_temp_to_current
  LDI 0
  STA .bss + 201
  JSR update_piece_cells
  LDA .bss + 208
  STA .bss + 207
  LDI 1
  STA .bss + 212
  LDI 1
  STA .bss + 209
  RET
frame_wait:
  LDA .bss + 209
  CPI 0
  JPZ fw_done
  LDI .frame_delay
  STA .bss + 234
fw_loop:
  JSR check_input
  LDA .bss + 210
  CPI 0
  JPZ fw_timer_check
  JSR handle_input_value
  LDI 0
  STA .bss + 210
  LDI 0
  STA .bss + 234
  JMP fw_done
fw_timer_check:
  LDA .bss + 234
  CPI 0
  JPZ fw_done
  JSR wait_100
  JSR check_input
  LDA .bss + 210
  CPI 0
  JPZ fw_afterwait
  JSR handle_input_value
  LDI 0
  STA .bss + 210
  LDI 0
  STA .bss + 234
  JMP fw_done
fw_afterwait:
  LDA .bss + 234
  SUI 1
  STA .bss + 234
  JMP fw_loop
fw_done:
  RET
maybe_render:
  LDA .bss + 212
  CPI 1
  JPZ mr_render
  RET
mr_render:
  LDI 0
  STA .bss + 212
  JSR update_display
  RET
drop_tick:
  LDA .bss + 209
  CPI 0
  JPZ dt_done
  LDA .bss + 207
  CPI 1
  JPC dt_decrement
  JMP dt_drop
dt_decrement:
  SUI 1
  STA .bss + 207
  RET
dt_drop:
  LDA .bss + 208
  STA .bss + 207
  JSR drop_step
  LDA .__res1
  CPI 1
  JPZ dt_moved
  LDI 1
  STA .bss + 212
  RET
dt_moved:
  LDI 1
  STA .bss + 212
  RET
dt_done:
  RET
drop_step:
  LDA .bss + 202
  STA .bss + 213
  LDA .bss + 203
  ADI 1
  STA .bss + 214
  LDI .bss + 236
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ ds_move
  JSR lock_piece
  JSR spawn_new_piece
  LDI 0
  STA .__res1
  RET
ds_move:
  LDA .bss + 214
  STA .bss + 203
  JSR update_piece_cells
  LDI 1
  STA .__res1
  RET
move_left:
  LDA .bss + 202
  SUI 1
  STA .bss + 213
  LDA .bss + 203
  STA .bss + 214
  LDI .bss + 236
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ ml_apply
  RET
ml_apply:
  LDA .bss + 213
  STA .bss + 202
  JSR update_piece_cells
  LDI 1
  STA .bss + 212
  RET
move_right:
  LDA .bss + 202
  ADI 1
  STA .bss + 213
  LDA .bss + 203
  STA .bss + 214
  LDI .bss + 236
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ mr_apply
  RET
mr_apply:
  LDA .bss + 213
  STA .bss + 202
  JSR update_piece_cells
  LDI 1
  STA .bss + 212
  RET
hard_drop:
  LDI 0
  STA .bss + 216
hd_loop:
  LDA .bss + 209
  CPI 0
  JPZ hd_done
  JSR drop_step
  LDA .__res1
  CPI 1
  JPZ hd_continue
  LDI 1
  STA .bss + 212
  RET
hd_continue:
  LDI 1
  STA .bss + 212
  JMP hd_loop
hd_done:
  RET
rotate_piece:
  LDA .bss + 200
  STA .bss + 218
  LDA .bss + 201
  ADI 1
  STA .bss + 215
  LDA .bss + 215
  CPI 4
  JPZ rp_wrap
  JMP rp_keep
rp_wrap:
  LDI 0
  STA .bss + 215
rp_keep:
  JSR build_offsets_temp
  LDA .bss + 202
  STA .bss + 213
  LDA .bss + 203
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ rp_commit
  LDA .bss + 202
  SUI 1
  STA .bss + 213
  LDA .bss + 203
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ rp_commit
  LDA .bss + 202
  ADI 1
  STA .bss + 213
  LDA .bss + 203
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ rp_commit
  LDA .bss + 202
  STA .bss + 213
  LDA .bss + 203
  SUI 1
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ rp_commit
  LDA .bss + 202
  SUI 1
  STA .bss + 213
  LDA .bss + 203
  SUI 1
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ rp_commit
  LDA .bss + 202
  ADI 1
  STA .bss + 213
  LDA .bss + 203
  SUI 1
  STA .bss + 214
  LDI .bss + 244
  STA .bss + 222
  JSR can_place
  LDA .__res1
  CPI 1
  JPZ rp_commit
  RET
rp_commit:
  JSR finalize_rotation
  RET
finalize_rotation:
  JSR copy_temp_to_current
  LDA .bss + 215
  STA .bss + 201
  LDA .bss + 213
  STA .bss + 202
  LDA .bss + 214
  STA .bss + 203
  LDA .bss + 208
  STA .bss + 207
  JSR update_piece_cells
  LDI 1
  STA .bss + 212
  RET
copy_temp_to_current:
  LDI .bss + 244
  STA .bss + 235
  LDI .bss + 236
  STA .bss + 222
  LDI 8
  STA .bss + 216
ctc_loop:
  LDA .bss + 216
  CPI 0
  JPZ ctc_done
  LPA .bss + 235                
  STA .bss + 221
  LDA .bss + 222
  PHA
  LDA .bss + 221
  SAS
  LDA .bss + 235
  ADI 1
  STA .bss + 235
  LDA .bss + 222
  ADI 1
  STA .bss + 222
  LDA .bss + 216
  SUI 1
  STA .bss + 216
  JMP ctc_loop
ctc_done:
  RET
build_offsets_temp:
  LDA .bss + 218
  CPI 0
  JPZ bo_i
  CPI 1
  JPZ bo_o
  CPI 2
  JPZ bo_t
  CPI 3
  JPZ bo_s
  CPI 4
  JPZ bo_z
  CPI 5
  JPZ bo_j
bo_l:
  LDA .bss + 215
  CPI 1
  JPZ bo_l1
  CPI 2
  JPZ bo_l2
  CPI 3
  JPZ bo_l3
bo_l0:
  LDI .l_rot0
  STA .bss + 224
  JMP parse_shape
bo_l1:
  LDI .l_rot1
  STA .bss + 224
  JMP parse_shape
bo_l2:
  LDI .l_rot2
  STA .bss + 224
  JMP parse_shape
bo_l3:
  LDI .l_rot3
  STA .bss + 224
  JMP parse_shape
bo_i:
  LDA .bss + 215
  CPI 1
  JPZ bo_i1
  CPI 2
  JPZ bo_i2
  CPI 3
  JPZ bo_i3
bo_i0:
  LDI .i_rot0
  STA .bss + 224
  JMP parse_shape
bo_i1:
  LDI .i_rot1
  STA .bss + 224
  JMP parse_shape
bo_i2:
  LDI .i_rot0
  STA .bss + 224
  JMP parse_shape
bo_i3:
  LDI .i_rot1
  STA .bss + 224
  JMP parse_shape
bo_o:
  LDI .o_rot0
  STA .bss + 224
  JMP parse_shape
bo_t:
  LDA .bss + 215
  CPI 1
  JPZ bo_t1
  CPI 2
  JPZ bo_t2
  CPI 3
  JPZ bo_t3
bo_t0:
  LDI .t_rot0
  STA .bss + 224
  JMP parse_shape
bo_t1:
  LDI .t_rot1
  STA .bss + 224
  JMP parse_shape
bo_t2:
  LDI .t_rot2
  STA .bss + 224
  JMP parse_shape
bo_t3:
  LDI .t_rot3
  STA .bss + 224
  JMP parse_shape
bo_s:
  LDA .bss + 215
  CPI 1
  JPZ bo_s1
  CPI 3
  JPZ bo_s3
bo_s0:
  LDI .s_rot0
  STA .bss + 224
  JMP parse_shape
bo_s1:
  LDI .s_rot1
  STA .bss + 224
  JMP parse_shape
bo_s3:
  LDI .s_rot1
  STA .bss + 224
  JMP parse_shape
bo_z:
  LDA .bss + 215
  CPI 1
  JPZ bo_z1
  CPI 3
  JPZ bo_z3
bo_z0:
  LDI .z_rot0
  STA .bss + 224
  JMP parse_shape
bo_z1:
  LDI .z_rot1
  STA .bss + 224
  JMP parse_shape
bo_z3:
  LDI .z_rot1
  STA .bss + 224
  JMP parse_shape
bo_j:
  LDA .bss + 215
  CPI 1
  JPZ bo_j1
  CPI 2
  JPZ bo_j2
  CPI 3
  JPZ bo_j3
bo_j0:
  LDI .j_rot0
  STA .bss + 224
  JMP parse_shape
bo_j1:
  LDI .j_rot1
  STA .bss + 224
  JMP parse_shape
bo_j2:
  LDI .j_rot2
  STA .bss + 224
  JMP parse_shape
bo_j3:
  LDI .j_rot3
  STA .bss + 224
  JMP parse_shape
parse_shape:
  LDI .bss + 244
  STA .bss + 222
  LDI 0
  STA .bss + 225
  LDI 0
  STA .bss + 226
ps_loop:
  LDA .bss + 225
  CPI 16
  JPZ ps_done
  LDA .bss + 224
  ADD .bss + 225
  STA .bss + 235
  LPA .bss + 235                
  STA .bss + 221
  LDA .bss + 221
  CPI 88
  JPZ ps_store
ps_next:
  LDA .bss + 225
  ADI 1
  STA .bss + 225
  JMP ps_loop
ps_store:
  LDA .bss + 225
  STA .bss + 218
  LDI 0
  STA .bss + 219
ps_row_loop:
  LDA .bss + 218
  CPI 4
  JPC ps_sub_row
  JMP ps_row_done
ps_sub_row:
  LDA .bss + 218
  SUI 4
  STA .bss + 218
  LDA .bss + 219
  ADI 1
  STA .bss + 219
  JMP ps_row_loop
ps_row_done:
  LDA .bss + 218
  STA .bss + 220
  LDA .bss + 222
  PHA
  LDA .bss + 220
  SAS
  LDA .bss + 222
  ADI 1
  STA .bss + 222
  LDA .bss + 222
  PHA
  LDA .bss + 219
  SAS
  LDA .bss + 222
  ADI 1
  STA .bss + 222
  LDA .bss + 226
  ADI 1
  STA .bss + 226
  JMP ps_next
ps_done:
  RET
update_piece_cells:
  LDI .bss + 236
  STA .bss + 222
  LDI .bss + 252
  STA .bss + 223
  LDI 0
  STA .bss + 226
upc_loop:
  LDA .bss + 226
  CPI 4
  JPZ upc_done
  LPA .bss + 222                
  STA .bss + 220
  LDA .bss + 222
  ADI 1
  STA .bss + 222
  LPA .bss + 222                
  STA .bss + 219
  LDA .bss + 222
  ADI 1
  STA .bss + 222
  LDA .bss + 202
  ADD .bss + 220
  STA .bss + 213
  LDA .bss + 203
  ADD .bss + 219
  STA .bss + 214
  LDA .bss + 223
  PHA
  LDA .bss + 213
  SAS
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  LDA .bss + 223
  PHA
  LDA .bss + 214
  SAS
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  LDA .bss + 226
  ADI 1
  STA .bss + 226
  JMP upc_loop
upc_done:
  LDA .bss + 200
  STA .bss + 218
  LDI .piece_chars
  ADD .bss + 218
  STA .bss + 224
  LPA .bss + 224                
  STA .bss + 227
  RET
can_place:
  LDI 0
  STA .__res1
  LDA .bss + 222
  STA .bss + 235
  LDI 0
  STA .bss + 226
cp_loop:
  LDA .bss + 226
  CPI 4
  JPZ cp_success
  LPA .bss + 235                
  STA .bss + 220
  LDA .bss + 235
  ADI 1
  STA .bss + 235
  LPA .bss + 235                
  STA .bss + 219
  LDA .bss + 235
  ADI 1
  STA .bss + 235
  LDA .bss + 213
  ADD .bss + 220
  STA .bss + 218
  LDA .bss + 218
  CPI .board_width
  JPC cp_fail
  LDA .bss + 214
  ADD .bss + 219
  STA .bss + 217
  LDA .bss + 217
  CPI .board_height
  JPC cp_fail
  LDA .bss + 217
  STA .bss + 219
  LDA .bss + 218
  STA .bss + 220
  JSR coords_to_ptr
  LPA .bss + 230                
  CPI 0
  JPZ cp_cell_ok
  JMP cp_fail
cp_cell_ok:
  LDA .bss + 226
  ADI 1
  STA .bss + 226
  JMP cp_loop
cp_fail:
  LDI 0
  STA .__res1
  RET
cp_success:
  LDI 1
  STA .__res1
  RET
coords_to_ptr:
  LDA .bss + 219
  STA .bss + 216
  LDI 0
  STA .bss + 229
ctp_loop:
  LDA .bss + 216
  CPI 0
  JPZ ctp_done
  LDA .bss + 229
  ADI .board_width
  STA .bss + 229
  LDA .bss + 216
  SUI 1
  STA .bss + 216
  JMP ctp_loop
ctp_done:
  LDA .bss + 229
  ADD .bss + 220
  STA .bss + 229
  LDI .bss
  ADD .bss + 229
  STA .bss + 230
  RET
lock_piece:
  LDI .bss + 252
  STA .bss + 223
  LDI 0
  STA .bss + 226
  LDA .bss + 200
  ADI 1
  STA .bss + 221
lp_loop:
  LDA .bss + 226
  CPI 4
  JPZ lp_after
  LPA .bss + 223                
  STA .bss + 220
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  LPA .bss + 223                
  STA .bss + 219
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  JSR coords_to_ptr
  LDA .bss + 230
  PHA
  LDA .bss + 221
  SAS
  LDA .bss + 226
  ADI 1
  STA .bss + 226
  JMP lp_loop
lp_after:
  JSR clear_lines
  LDI 1
  STA .bss + 212
  RET
clear_lines:
  LDI 0
  STA .bss + 233
  LDI .board_height
  SUI 1
  STA .bss + 231
cl_loop:
  LDA .bss + 231
  CPI 255
  JPZ cl_finish
  JSR row_full
  LDA .__res1
  CPI 1
  JPZ cl_remove
cl_advance:
  LDA .bss + 231
  CPI 0
  JPZ cl_finish
  LDA .bss + 231
  SUI 1
  STA .bss + 231
  JMP cl_loop
cl_remove:
  JSR remove_row
  LDA .bss + 233
  ADI 1
  STA .bss + 233
  JMP cl_loop
cl_finish:
  LDA .bss + 233
  CPI 0
  JPZ cl_done
  LDA .bss + 205
  ADD .bss + 233
  STA .bss + 205
  LDA .bss + 233
  CPI 1
  JPZ cl_score1
  CPI 2
  JPZ cl_score2
  CPI 3
  JPZ cl_score3
  CPI 4
  JPZ cl_score4
  JMP cl_after_score
cl_score1:
  LDA .bss + 204
  ADI .score_single
  STA .bss + 204
  JMP cl_after_score
cl_score2:
  LDA .bss + 204
  ADI .score_double
  STA .bss + 204
  JMP cl_after_score
cl_score3:
  LDA .bss + 204
  ADI .score_triple
  STA .bss + 204
  JMP cl_after_score
cl_score4:
  LDA .bss + 204
  ADI .score_tetris
  STA .bss + 204
cl_after_score:
  LDA .bss + 205
  STA .bss + 218
  LDI 1
  STA .bss + 206
cl_level_loop:
  LDA .bss + 218
  CPI .lines_per_level
  JPC cl_level_more
  JMP cl_set_interval
cl_level_more:
  LDA .bss + 218
  SUI .lines_per_level
  STA .bss + 218
  LDA .bss + 206
  ADI 1
  STA .bss + 206
  JMP cl_level_loop
cl_set_interval:
  LDA .bss + 206
  CPI 1
  JPZ cl_level_initial
  LDA .bss + 206
  SUI 1
  STA .bss + 218
  LDA .bss + 218
  LSA
  STA .bss + 218
  LDI .initial_drop
  SUB .bss + 218
  STA .bss + 216
  LDA .bss + 216
  CPI .min_drop
  JPC cl_store_interval
  LDI .min_drop
  STA .bss + 216
cl_store_interval:
  LDA .bss + 216
  STA .bss + 208
  STA .bss + 207
  JMP cl_done
cl_level_initial:
  LDI .initial_drop
  STA .bss + 208
  STA .bss + 207
cl_done:
  RET
row_full:
  LDA .bss + 231
  STA .bss + 219
  LDI 0
  STA .bss + 220
  JSR coords_to_ptr
  LDA .bss + 230
  STA .bss + 228
  LDI .board_width
  STA .bss + 216
  LDI 1
  STA .__res1
rf_loop:
  LDA .bss + 216
  CPI 0
  JPZ rf_done
  LPA .bss + 228                
  CPI 0
  JPZ rf_not_full
  LDA .bss + 228
  ADI 1
  STA .bss + 228
  LDA .bss + 216
  SUI 1
  STA .bss + 216
  JMP rf_loop
rf_not_full:
  LDI 0
  STA .__res1
  RET
rf_done:
  RET
remove_row:
  LDA .bss + 231
  STA .bss + 219
rr_loop:
  LDA .bss + 219
  CPI 0
  JPZ rr_fill_top
  LDA .bss + 219
  STA .bss + 218
  LDA .bss + 219
  SUI 1
  STA .bss + 216
  LDA .bss + 216
  STA .bss + 219
  LDI 0
  STA .bss + 220
  JSR coords_to_ptr
  LDA .bss + 230
  STA .bss + 223
  LDA .bss + 218
  STA .bss + 219
  LDI 0
  STA .bss + 220
  JSR coords_to_ptr
  LDA .bss + 230
  STA .bss + 228
  LDI .board_width
  STA .bss + 217
rr_copy_loop:
  LDA .bss + 217
  CPI 0
  JPZ rr_next
  LPA .bss + 223                
  STA .bss + 221
  LDA .bss + 228
  PHA
  LDA .bss + 221
  SAS
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  LDA .bss + 228
  ADI 1
  STA .bss + 228
  LDA .bss + 217
  SUI 1
  STA .bss + 217
  JMP rr_copy_loop
rr_next:
  LDA .bss + 218
  SUI 1
  STA .bss + 219
  JMP rr_loop
rr_fill_top:
  LDI 0
  STA .bss + 219
  LDI 0
  STA .bss + 220
  JSR coords_to_ptr
  LDA .bss + 230
  STA .bss + 228
  LDI .board_width
  STA .bss + 217
rr_zero_loop:
  LDA .bss + 217
  CPI 0
  JPZ rr_done
  LDA .bss + 228
  PHA
  LDI 0
  SAS
  LDA .bss + 228
  ADI 1
  STA .bss + 228
  LDA .bss + 217
  SUI 1
  STA .bss + 217
  JMP rr_zero_loop
rr_done:
  RET
render_board:
  LDI .bss
  STA .bss + 228
  LDI 0
  STA .bss + 231
rb_loop:
  LDA .bss + 231
  CPI .board_height
  JPZ rb_done
  JSR print_indent
  LDI .border_char
  JSR #0
  LDI 0
  STA .bss + 232
rb_col_loop:
  LDA .bss + 232
  CPI .board_width
  JPZ rb_row_end
  LPA .bss + 228                
  STA .bss + 218
  LDA .bss + 228
  ADI 1
  STA .bss + 228
  LDI .space_char
  STA .bss + 221
  LDA .bss + 218
  CPI 0
  JPZ rb_check_piece
  LDA .bss + 218
  SUI 1
  STA .bss + 225
  LDI .piece_chars
  ADD .bss + 225
  STA .bss + 224
  LPA .bss + 224                
  STA .bss + 221
rb_check_piece:
  JSR check_active_overlay
  LDA .bss + 221
  JSR #0
  LDA .bss + 232
  ADI 1
  STA .bss + 232
  JMP rb_col_loop
rb_row_end:
  LDI .border_char
  JSR #0
  LDA .bss + 231
  CPI .last_row_index
  JPZ rb_skip_newline
  JSR #0
rb_skip_newline:
  LDA .bss + 231
  ADI 1
  STA .bss + 231
  JMP rb_loop
rb_done:
  RET
check_active_overlay:
  LDA .bss + 209
  CPI 0
  JPZ cao_done
  LDI .bss + 252
  STA .bss + 223
  LDI 0
  STA .bss + 226
cao_loop:
  LDA .bss + 226
  CPI 4
  JPZ cao_done
  LPA .bss + 223                
  STA .bss + 220
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  LPA .bss + 223                
  STA .bss + 219
  LDA .bss + 223
  ADI 1
  STA .bss + 223
  LDA .bss + 220
  CMP .bss + 232
  JPZ cao_check_row
  JMP cao_next
cao_check_row:
  LDA .bss + 219
  CMP .bss + 231
  JPZ cao_hit
cao_next:
  LDA .bss + 226
  ADI 1
  STA .bss + 226
  JMP cao_loop
cao_hit:
  LDA .bss + 227
  STA .bss + 221
cao_done:
  RET
print_indent:
  LDI .board_indent
  STA .bss + 216
pi_loop:
  LDA .bss + 216
  CPI 0
  JPZ pi_done
  DIS 17
  JSR #0
  LDA .bss + 216
  SUI 1
  STA .bss + 216
  JMP pi_loop
pi_done:
  RET
render_scoreboard:
  DIS 2
  JSR #0
  LDI .title_text
  JSR print_z
  JSR #0
  LDI .score_text
  JSR print_z
  LDA .bss + 204
  JSR #0
  JSR #0
  LDI .lines_text
  JSR print_z
  LDA .bss + 205
  JSR #0
  JSR #0
  LDI .level_text
  JSR print_z
  LDA .bss + 206
  JSR #0
  JSR #0
  LDI .controls_line1
  JSR print_z
  JSR #0
  LDI .controls_line2
  JSR print_z
  JSR #0
  LDI .controls_line3
  JSR print_z
  JSR #0
  LDI .controls_line4
  JSR print_z
  JSR #0
  RET
update_display:
  DIS 2
  JSR #0
  JSR render_board
  JSR render_scoreboard
  RET
clear_display:
  DIS 1
  JSR #0
  RET
render_game_over:
  JSR clear_display
  LDI .game_over_text
  PHA
  JSR #0
  LDI .final_score_text
  JSR print_z
  LDA .bss + 204
  JSR #0
  JSR #0
  LDI .exit_text
  JSR print_z
  JSR wait_for_exit
  RET
wait_for_exit:
  LDI 0
  STA .bss + 210
  STA .__no_input
  STA .bss + 260
  STA .bss + 261
wfe_loop:
  JSR check_input
  LDA .bss + 210
  CPI 0
  JPZ wfe_loop
  JSR #0
  DIS 15            
  JSR #0
  RET
handle_input_value:
  LDA .bss + 209
  CPI 0
  JPZ handle_input_game_over
  LDA .bss + 211
  CPI 52
  JPZ hi_left
  CPI 54
  JPZ hi_right
  CPI 53
  JPZ hi_down
  CPI 42
  JPZ hi_rotate
  CPI 31
  JPZ hi_hard_drop
  CPI 32
  JPZ hi_hard_drop
  CPI 48
  JPZ hi_hard_drop
  CPI 81
  JPZ hi_quit
  RET
hi_left:
  JSR move_left
  RET
hi_right:
  JSR move_right
  RET
hi_down:
  JSR drop_step
  LDA .__res1
  CPI 1
  JPZ hi_down_moved
  LDI 1
  STA .bss + 212
  RET
hi_down_moved:
  LDA .bss + 208
  STA .bss + 207
  LDI 1
  STA .bss + 212
  RET
hi_rotate:
  JSR rotate_piece
  RET
hi_hard_drop:
  JSR hard_drop
  RET
hi_quit:
  LDI 0
  STA .bss + 209
  LDI 1
  STA .bss + 212
  RET
handle_input_game_over:
  LDA .bss + 211
  CPI 81
  JPZ hi_quit
  LDI 0
  STA .bss + 210
  RET
check_input:
  KEI
  PHA
  CPI 128
  JPC ci_entered
  PLA
  LDI 0
  STA .bss + 210
  LDI 0
  STA .__no_input
  STA .bss + 260
  STA .bss + 261
  RET
ci_entered:
  PLA
  SUI 128
  STA .bss + 211
  LDA .__no_input
  CPI 0
  JPZ ci_new_press
  LDA .bss + 211
  CMP .bss + 260
  JPZ ci_repeat
ci_new_press:
  LDA .bss + 211
  STA .bss + 260
  LDI 1
  STA .bss + 210
  LDI 1
  STA .__no_input
  LDI 0
  STA .bss + 261
  RET
ci_repeat:
  LDA .bss + 261
  ADI 1
  STA .bss + 261
  CPI .input_repeat_delay
  JPC ci_fire_repeat
  RET
ci_fire_repeat:
  LDI .input_repeat_delay
  STA .bss + 261
  LDI 1
  STA .bss + 210
  RET
print_z:
  PHA
  LDI 1
  PHA
  LDI 0
  PHA
  JSR #0
  RET
wait_100:
  JSR check_input
  LDA .bss + 210
  CPI 0
  JPZ w100_set_no_input
  LDA .bss + 211
  CMP .bss + 260
  JPZ w100_same_key
  LDA .bss + 211
  STA .bss + 260       
  LDI 0
  STA .bss + 261       
  LDI 0
  STA .__no_input        
  JMP w100_after_gate
w100_same_key:
  LDA .bss + 261
  ADI 1
  STA .bss + 261       
  CPI .input_repeat_delay
  JPC w100_allow_repeat
  JMP w100_after_gate
w100_allow_repeat:
  LDI 0
  STA .__no_input
w100_after_gate:
  LDA .__no_input
  CPI 1
  JPZ w100_before_sleep
  LDI 1
  STA .__no_input
w100_set_no_input:
  LDI 0
  STA .__no_input
  JMP w100_before_sleep
w100_before_sleep:
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: toggledis ------

--- Assembling ---

toggle_display_enable:
  DIC 0
  DIC 128    
  DIC 0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: wait100 ------

--- Assembling ---

wait_100:
  LDI 100
wait_100_loop:
  SUI 1
  JNZ wait_100_loop
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: wait1600 ------

--- Assembling ---

wait_1600:
  JSR wait_800
  JSR wait_800
  RET
wait_800:
  JSR wait_400
  JSR wait_400
  RET
wait_400:
  JSR wait_200
  JSR wait_200
  RET
wait_200:
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: wait3200 ------

--- Assembling ---

wait_3200:
  JSR #0
  JSR #0
  RET

--- Encode into memory ---


--- Assembled program ---



 ------ Assembling snippet: writechar ------

--- Assembling ---

write_char:
  DIA           
  DIC 0
  DIC 192
  DIC 0
  RET

--- Encode into memory ---


--- Assembled program ---


Free gaps between modules:
  testlsa -> testprintf: [15389,15400)  words=11
  writechar -> asteroids_data: [17971,25008)  words=7037
  asteroids_data -> calc_data: [25052,25072)  words=20
  calc_data -> compareget_data: [25107,25136)  words=29
  compareget_data -> compile_data: [25138,25168)  words=30
  compile_data -> cpymem_data: [25563,25584)  words=21
  cpymem_data -> emu_data: [25616,25632)  words=16
  emu_data -> esh_data: [26193,26224)  words=31
  esh_data -> getmnemonicn_data: [26307,26336)  words=29
  getmnemonicn_data -> osabi_data: [26610,26640)  words=30
  osabi_data -> help_data: [27008,27024)  words=16
  help_data -> hexdump_data: [28693,28720)  words=27
  hexdump_data -> list_data: [28737,28768)  words=31
  list_data -> osinfo_data: [28795,28816)  words=21
  osinfo_data -> poke_data: [29204,29232)  words=28
  poke_data -> run_data: [29268,29296)  words=28
  run_data -> ted_data: [29337,29360)  words=23
  ted_data -> testprintf_data: [29424,29440)  words=16
  testprintf_data -> testmem_data: [29498,29520)  words=22
  testmem_data -> tetris_data: [29572,29600)  words=28

Program table at 3000..5113 (66 entries, 2113 words)
Wrote /var/home/janole/Projects/8-bit-computer-emulator/32bit/compiled_routines.json

Program table overview (written to 32bit/prog_table_suggest.txt):

Program table base: 3000
Row stride: 32 words (name16 + meta 6 + flags10)
Entries (NAME → BASE, SIZE, BSS, DATA, CALLABLE):
  ADDSQ64          →  6000 (len  120)  BSS 20000+8     DATA —           CALL 0
  ASTEROIDS        →  6120 (len  584)  BSS 20008+12    DATA 25008+44    CALL 1
  BUFFTOSEP        →  6704 (len   86)  BSS 20020+168   DATA —           CALL 0
  CALC             →  6790 (len  198)  BSS —           DATA 25072+35    CALL 1
  CAT              →  6988 (len  191)  BSS 20188+2     DATA —           CALL 1
  CLS              →  7179 (len    9)  BSS —           DATA —           CALL 1
  COMPAREGET       →  7188 (len   91)  BSS 20190+2     DATA 25136+2     CALL 0
  COMPILE          →  7279 (len 1443)  BSS 20192+737   DATA 25168+395   CALL 1
  CPYMEM           →  8722 (len  190)  BSS 20929+3     DATA 25584+32    CALL 1
  DISPHEX          →  8912 (len   93)  BSS 20932+3     DATA —           CALL 0
  DISPINT          →  9005 (len   55)  BSS 20935+4     DATA —           CALL 0
  DISPNUM          →  9060 (len   82)  BSS 20939+3     DATA —           CALL 0
  DISPQ78          →  9142 (len  173)  BSS 20942+9     DATA —           CALL 0
  DIVIDE           →  9315 (len  148)  BSS 20951+3     DATA —           CALL 0
  DUMP             →  9463 (len  150)  BSS 20954+7     DATA —           CALL 1
  ECHON            →  9613 (len   16)  BSS —           DATA —           CALL 0
  EMU              →  9629 (len  156)  BSS —           DATA 25632+561   CALL 1
  ESH              →  9785 (len  886)  BSS 20961+1620  DATA 26224+83    CALL 1
  FIBONACCI        → 10671 (len   41)  BSS 22581+2     DATA —           CALL 1
  FILLMEM          → 10712 (len   69)  BSS 22583+3     DATA —           CALL 1
  GCD              → 10781 (len   41)  BSS 22586+2     DATA —           CALL 0
  GETMNEMONICN     → 10822 (len   16)  BSS 22588+2     DATA 26336+274   CALL 0
  OSABI            → 10838 (len   16)  BSS 22590+2     DATA 26640+368   CALL 0
  GETPROGADDR      → 10854 (len   65)  BSS 22592+3     DATA —           CALL 0
  HELP             → 10919 (len  103)  BSS 22595+3     DATA 27024+1669  CALL 1
  HEXDUMP          → 11022 (len  322)  BSS 22598+7     DATA 28720+17    CALL 1
  ISPOSITIVE       → 11344 (len   46)  BSS 22605+3     DATA —           CALL 0
  LIST             → 11390 (len  195)  BSS 22608+4     DATA 28768+27    CALL 1
  MEMEDIT          → 11585 (len  412)  BSS 22612+7     DATA —           CALL 1
  MODMUL           → 11997 (len   92)  BSS 22619+4     DATA —           CALL 0
  MULTIPLY         → 12089 (len   47)  BSS 22623+5     DATA —           CALL 0
  NEWLINE          → 12136 (len    5)  BSS —           DATA —           CALL 0
  OFF              → 12141 (len    9)  BSS —           DATA —           CALL 1
  OSINFO           → 12150 (len  431)  BSS 22628+17    DATA 28816+388   CALL 1
  PARSENUM         → 12581 (len   57)  BSS 22645+4     DATA —           CALL 0
  PEEK             → 12638 (len   17)  BSS —           DATA —           CALL 1
  POKE             → 12655 (len   38)  BSS 22649+3     DATA 29232+36    CALL 1
  POW              → 12693 (len   53)  BSS 22652+3     DATA —           CALL 0
  POW232           → 12746 (len   46)  BSS 22655+2     DATA —           CALL 0
  PRIMES           → 12792 (len   74)  BSS 22657+3     DATA —           CALL 1
  PRINT            → 12866 (len   66)  BSS 22660+4     DATA —           CALL 0
  PRINTEZ          → 12932 (len   17)  BSS 22664+2     DATA —           CALL 0
  PRINTF           → 12949 (len  197)  BSS 22666+5     DATA —           CALL 0
  PUZZLE           → 13146 (len  158)  BSS 22671+10    DATA —           CALL 1
  Q7_8_DIV         → 13304 (len  249)  BSS 22681+8     DATA —           CALL 0
  Q7_8_MUL         → 13553 (len  153)  BSS 22689+8     DATA —           CALL 0
  RANDINT          → 13706 (len   68)  BSS 22697+2     DATA —           CALL 0
  REM64            → 13774 (len   73)  BSS 22699+7     DATA —           CALL 0
  RUN              → 13847 (len   37)  BSS 22706+2     DATA 29296+41    CALL 1
  SKIPLINE         → 13884 (len   88)  BSS —           DATA —           CALL 0
  SPLIT            → 13972 (len   83)  BSS 22708+166   DATA —           CALL 0
  SQRT             → 14055 (len   57)  BSS 22874+4     DATA —           CALL 0
  STRCOMPARE       → 14112 (len   46)  BSS 22878+3     DATA —           CALL 0
  TED              → 14158 (len 1168)  BSS 22881+14    DATA 29360+64    CALL 1
  TGETMNEMONIC     → 15326 (len   17)  BSS —           DATA —           CALL 1
  TGETOSVAR        → 15343 (len   17)  BSS —           DATA —           CALL 1
  TGETPROG         → 15360 (len   20)  BSS —           DATA —           CALL 1
  TESTLSA          → 15380 (len    9)  BSS —           DATA —           CALL 1
  TESTPRINTF       → 15400 (len   43)  BSS 22895+7     DATA 29440+58    CALL 1
  TESTMEM          → 15443 (len  196)  BSS 22902+7     DATA 29520+52    CALL 1
  TETRIS           → 15639 (len 2285)  BSS 22909+262   DATA 29600+620   CALL 1
  TOGGLEDIS        → 17924 (len    7)  BSS —           DATA —           CALL 0
  WAIT100          → 17931 (len    7)  BSS —           DATA —           CALL 0
  WAIT1600         → 17938 (len   20)  BSS —           DATA —           CALL 0
  WAIT3200         → 17958 (len    5)  BSS —           DATA —           CALL 0
  WRITECHAR        → 17963 (len    8)  BSS —           DATA —           CALL 0

BSS regions:
  ADDSQ64          BSS [20000,20008) size=8
  ASTEROIDS        BSS [20008,20020) size=12
  BUFFTOSEP        BSS [20020,20188) size=168
  CAT              BSS [20188,20190) size=2
  COMPAREGET       BSS [20190,20192) size=2
  COMPILE          BSS [20192,20929) size=737
  CPYMEM           BSS [20929,20932) size=3
  DISPHEX          BSS [20932,20935) size=3
  DISPINT          BSS [20935,20939) size=4
  DISPNUM          BSS [20939,20942) size=3
  DISPQ78          BSS [20942,20951) size=9
  DIVIDE           BSS [20951,20954) size=3
  DUMP             BSS [20954,20961) size=7
  ESH              BSS [20961,22581) size=1620
  FIBONACCI        BSS [22581,22583) size=2
  FILLMEM          BSS [22583,22586) size=3
  GCD              BSS [22586,22588) size=2
  GETMNEMONICN     BSS [22588,22590) size=2
  OSABI            BSS [22590,22592) size=2
  GETPROGADDR      BSS [22592,22595) size=3
  HELP             BSS [22595,22598) size=3
  HEXDUMP          BSS [22598,22605) size=7
  ISPOSITIVE       BSS [22605,22608) size=3
  LIST             BSS [22608,22612) size=4
  MEMEDIT          BSS [22612,22619) size=7
  MODMUL           BSS [22619,22623) size=4
  MULTIPLY         BSS [22623,22628) size=5
  OSINFO           BSS [22628,22645) size=17
  PARSENUM         BSS [22645,22649) size=4
  POKE             BSS [22649,22652) size=3
  POW              BSS [22652,22655) size=3
  POW232           BSS [22655,22657) size=2
  PRIMES           BSS [22657,22660) size=3
  PRINT            BSS [22660,22664) size=4
  PRINTEZ          BSS [22664,22666) size=2
  PRINTF           BSS [22666,22671) size=5
  PUZZLE           BSS [22671,22681) size=10
  Q7_8_DIV         BSS [22681,22689) size=8
  Q7_8_MUL         BSS [22689,22697) size=8
  RANDINT          BSS [22697,22699) size=2
  REM64            BSS [22699,22706) size=7
  RUN              BSS [22706,22708) size=2
  SPLIT            BSS [22708,22874) size=166
  SQRT             BSS [22874,22878) size=4
  STRCOMPARE       BSS [22878,22881) size=3
  TED              BSS [22881,22895) size=14
  TESTPRINTF       BSS [22895,22902) size=7
  TESTMEM          BSS [22902,22909) size=7
  TETRIS           BSS [22909,23171) size=262
Wrote BSS map to /var/home/janole/Projects/8-bit-computer-emulator/32bit/bss_map.txt
Patched ECHON call in /var/home/janole/Projects/8-bit-computer-emulator/32bit/emulator_os.txt to base 9613
Patched CALL_STUB operand in /var/home/janole/Projects/8-bit-computer-emulator/32bit/emulator_os.txt to ESH base 9785
