LDI 0
STA 255
STA 200
STA 201
KEI     # loop for input check
ADI 128
JPC 8   # if input
JMP 4   # input check loop end
ADI 192
JPC 38  # handle_add
ADI 32
JPC 46  # handle sub
ADI 16
JPC 54  # handle mul
ADI 16
STA 255 # store input in 255
LDI 11  # multiplier + 1
STA 254 # store multiplier in 254
LDA 200 # load value from 200
STA 253 # store value as multiplicand
LDI 0   # initialize product
STA 252 # set product to 0
LDA 254 # - start multiply
SUI 1   #
JPZ 30  #
STA 254 # - store multiplier back in memory
LDA 252 # - load product
ADD 253 # - add multiplicand to product
STA 252 # - store product
JMP 22  # - jump to start of multiply
LDA 252 # - FINISHED - load product
ADD 255 # - add the input value
OUT     # - display result
STA 200 # - store to 200
KEI     # no-input loop
ADI 0   
JPZ 4   # jump to 0 when there is no longer any input given
JMP 34  # no-input loop end
LDI 255 # handle add
LDA 201 # load the current sum from 201
ADD 200 # add the current input
OUT     # output
STA 201 # store back in 201
LDI 0
STA 200
JMP 34
LDI 254 # handle sub
LDA 201 # load the current sum from 201
SUB 200 # sub the current input
OUT     # output
STA 201 # store back in 201
LDI 0
STA 200
JMP 34
LDI 253 # handle mul
LDA 201 # load the current sum from 201 - multiplicand
STA 249 # store multiplicand in 249
LDI 0   # initialize product
STA 248 # set product to 0
LDA 200 # get the current input - multiplier
ADI 1   # add one to multiplier
STA 247 # store multiplier in 247
LDA 247 # - start multiply
SUI 1   #
JPZ 70  #
STA 247 # - store multiplier back in memory
LDA 248 # - load product
ADD 249 # - add multiplicand to product
STA 248 # - store product
JMP 62  # - jump to start of multiply
LDA 248 # - FINISHED - load product
OUT     # - display result
LDI 0
STA 200
JMP 34