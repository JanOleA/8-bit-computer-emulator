;! name: HELP
;! entry: help
;! deps: newline, write_char, printez, print, buffer_to_separator, wait_3200
;! abi: all
;! bss: auto
;! align: 4
;! callable: yes

; Items, separated by backslash ("\"). Kept in a single auto-data string.
.separator = "\"
.help_items = "Available commands:                     \----------------------------------------\OSINFO        : print system info       \CAT <addr>    : Print text from <addr>  \                until null terminator   \                                        \HELP          : show this help text     \TED <arg>     : Edit text at mem[arg:]  \COMPILE <a1> <a2>: Compile EASM text at \      mem[a1:] to executable at mem[a2:]\                                        \RUN <addr>    : run mach. code at <addr>\CALC <a> <op> <b>  : compute result     \           op={+,-,*,/,P(power),S(sqrt)}\                                        \MEMEDIT <addr>: begin memedit at <addr> \PEEK <a>      : print mem[<a>]          \POKE <a> <val>: store <val> at <a>      \DUMP <a> <n>  : print decimal words     \HEXDUMP <a> <n>    : print hex words    \FILLMEM <start> <num> <val>: fill memory\    From <start>, N=<num> with <val>    \                                        \CPYMEM <src> <dst> <len>: copy memory   \    mem[src:src+len] > mem[dst:dst+len] \                                        \PUZZLE        : Matt Parker 19 puzzle   \PRIMES        : print primes up to 300  \FIBONACCI     : print fibonacci values  \EMU           : shows some art          \ASTEROIDS     : play asteroids          \TETRIS        : play tetris             \TESTMEM       : List start/stop/size of \           every memory block with 100+ \           contiguous nulls             \                                        \ESH           : simple command prompt   \LIST          : show installed routines \CLS           : clear the screen        \OFF           : disable screen and halt "
.more_text = "              --- more ---"

; bss + 0                 : line count
; bss + 1                 : current pointer in .help_items
; bss + 2                 : whether buffer_to_separator ended on a null

help:
  LDI 0
  STA .bss
  STA .bss + 1
hp_advance:
  LDI .help_items
  ADD .bss + 1
  PHA
  LDA .separator
  PHA
  JSR @buffer_to_separator
  PLA
  STA .res1
  PLA
  STA .res2
  PLA
  STA .bss + 2
  LDA .res2
  CPI 0
  JPZ hp_done                 ; end if length of returned string is 0
  ADD .bss + 1                ; add current string length to pointer
  ADI 1                       ; add one for the separator

  STA .bss + 1
  LDA .res1
  PHA
  JSR @printez

  LDA .bss + 2                   
  CPI 1                       ; end if buffer ended on a null
  JPZ hp_done
hp_newline:
  LDA .bss
  ADI 1
  STA .bss
  CPI 19
  JPZ hp_more
  JMP hp_advance
hp_more:
  ; print "--- more ---"
  LDI .more_text
  PHA
  LDI 1
  PHA       ; skip newline
  LDI 0
  PHA       ; max length = 0 (unbounded)
  JSR @print
  ; wait for any key
hp_wait_key:
  KEI
  PHA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  CPI 1
  JPZ hp_key_ok
  PLA
  JMP hp_wait_key
hp_key_ok:
  PLA
  JSR @newline
  LDI 0
  STA .bss
  JMP hp_advance
hp_done:
  RET
