;! name: HELP
;! entry: help
;! deps: newline, write_char, echon, buffer_to_separator, wait_3200
;! abi: os
;! bss: auto
;! align: 4

; Items, separated by backslash ("\"). Kept in a single auto-data string.
.separator = "\"
.help_items = "LIST          : show installed routines\CAT <addr>    : Print text from <addr>\                until null terminator\HELP <page>   : show this help at <page>\TED <arg>     : Edit text at mem[arg:]\COMPILE <a1> <a2>: Compile text at\      mem[a1:] to executable at mem[a2:]\ECHO <arg>    : print <arg> \CLS           : clear the screen\PEEK <addr>   : print mem[<addr>]\POKE <addr> <val>: store <val> at <addr>\PRIMES        : print primes up to 300\PUZZLE        : Matt Parker 19 puzzle\ESH           : simple command prompt\DUMP <addr> <len>: print decimal words\HEXDUMP <addr> <len>: print hex words\CALC <a> <op> <b>: compute result\      op={+,-,*,/,P(power),S(sqrt)}\MEMEDIT <addr>: begin memedit @<addr>\FILLMEM <start> <num> <val>: fill memory\      From <start>, N=<num> with <val>\CPYMEM <src> <dst> <len>: copy memory\     mem[src:src+len] > mem[dst:dst+len]\FIBONACCI     : print fibonacci values\EMU           : shows some art\ASTEROIDS     : play asteroids\TESTMEM       : List start/stop/size of\      every memory block with 100+\      contiguous nulls\OFF           : disable screen and halt"
.more_text = "              --- more ---"

; bss + 0                 : line count
; bss + 1                 : current pointer in .help_items
; bss + 2                 : whether buffer_to_separator ended on a null

help:
  LDI 0
  STA .bss
  STA .bss + 1
hp_advance:
  LDA .separator
  STA .arg2
  LDI .help_items
  ADD .bss + 1
  STA .arg1
  JSR @buffer_to_separator
  LDA .res3
  STA .bss + 2
  LDA .res2
  CPI 0
  JPZ hp_done                 ; end if length of returned string is 0
  ADD .bss + 1                ; add current string length to pointer
  ADI 1                       ; add one for the separator
  STA .bss + 1
  LDI 0
  STA .num_digits
  STA .arg2
  LDA .res1
  STA .arg1
  JSR @echon
  LDA .bss + 2                   
  CPI 1                       ; end if buffer ended on a null
  JPZ hp_done
hp_newline:
  LDA .bss
  ADI 1
  STA .bss
  CPI 19
  JPZ hp_more
  JMP hp_advance
hp_more:
  ; print "--- more ---"
  LDI 0
  STA .num_digits
  LDI 1
  STA .arg2
  LDI .more_text
  STA .arg1
  JSR @echon
  ; wait for any key
hp_wait_key:
  KEI
  PHA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  RSA
  CPI 1
  JPZ hp_key_ok
  PLA
  JMP hp_wait_key
hp_key_ok:
  PLA
  JSR @newline
  LDI 0
  STA .bss
  JMP hp_advance
hp_done:
  RET
