;! name: POKE
;! entry: poke
;! deps:
;! abi: all
;! bss: none
;! align: 4

poke:
  ; argc >= 2?
  LDA .argv_base
  CPI 2
  JPC pk_ok
  RET
pk_ok:
  ; parse address from argv[0] -> res1
  LDA .argv_base + 1
  STA .res2
  LDI 0
  STA .res1
pk_paddr:
  LPA .res2                ; load mem[mem[.res2]] into A
  CPI 0
  JPZ pk_paddr_done
  CPI 32
  JPZ pk_paddr_done
  SUI 48
  STA .char
  LDA .res1
  LSA
  STA .pow2
  LSA
  LSA
  ADD .pow2
  STA .res1
  LDA .res1
  ADD .char
  STA .res1
  LDA .res2
  ADI 1
  STA .res2
  JMP pk_paddr
pk_paddr_done:
  ; parse value from argv[1] -> arg1
  LDA .argv_base + 2
  STA .res2
  LDI 0
  STA .arg1
pk_pval:
  LPA .res2                ; load mem[mem[.res2]] into A
  CPI 0
  JPZ pk_pval_done
  CPI 32
  JPZ pk_pval_done
  SUI 48
  STA .char
  LDA .arg1
  LSA
  STA .pow2
  LSA
  LSA
  ADD .pow2
  STA .arg1
  LDA .arg1
  ADD .char
  STA .arg1
  LDA .res2
  ADI 1
  STA .res2
  JMP pk_pval
pk_pval_done:
  ; store: *addr = val
  LDA .res1
  PHA
  LDA .arg1
  SAS
  RET
