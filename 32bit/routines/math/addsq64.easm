;! name: ADDSQ64
;! entry: add_square64
;! deps:
;! abi: os
;! bss: auto
;! align: 4

; Add p^2 into a 64-bit sum stored at [sum_lo_addr],[sum_hi_addr]
; Inputs:
;   .arg1 = p
;   .arg2 = sum_lo_addr
;   .res1 = sum_hi_addr
; Returns: none (A undefined). Updates memory at given addresses.
; Locals:
;   .bss     = multiplicand_lo (p << k)
;   .bss + 1 = multiplier (p >> k)
;   .bss + 2 = prod_lo
;   .bss + 3 = prod_hi
;   .bss + 4 = tmp_lo
;   .bss + 5 = tmp_hi
;   .bss + 6 = multiplicand_hi
;   .bss + 7 = temp (for shifting multiplier)

add_square64:
  ; Setup multiplicand and multiplier
  LDA .arg1
  STA .bss           ; multiplicand_lo = p
  LDA .arg1
  STA .bss + 1       ; multiplier = p
  LDI 0
  STA .bss + 2       ; prod_lo = 0
  STA .bss + 3       ; prod_hi = 0
  STA .bss + 6       ; multiplicand_hi = 0

asq_loop:
  ; if multiplier == 0 -> done
  LDA .bss + 1
  CPI 0
  JPZ asq_add_to_sum
  ; Shift multiplier and branch on prior LSB
  RSA
  STA .bss + 7
  JPC asq_odd

asq_store_mul:
  LDA .bss + 7
  STA .bss + 1

  ; multiplicand <<= 1 (64-bit)
  ; shift hi first
  LDA .bss + 6
  LSA
  STA .bss + 6
  ; shift lo and propagate bit into hi if overflowed
  LDA .bss
  LSA
  STA .bss
  JPC asq_set_hi_bit
  JMP asq_shift_done
asq_odd:
  ; prod += multiplicand (64-bit)
  ; prod_lo += mul_lo
  LDA .bss + 2
  ADD .bss
  STA .bss + 2
  JPC asq_carry_lo
  JMP asq_add_hi_only
asq_carry_lo:
  LDA .bss + 3
  ADI 1
  STA .bss + 3
asq_add_hi_only:
  ; prod_hi += mul_hi
  LDA .bss + 3
  ADD .bss + 6
  STA .bss + 3
  JMP asq_store_mul
asq_set_hi_bit:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
asq_shift_done:
  JMP asq_loop

asq_add_to_sum:
  ; Load current sum_lo into tmp_lo
  LPA .arg2                ; load mem[mem[.arg2]] into A
  STA .bss + 4
  ; Load sum_hi into tmp_hi
  LPA .res1                ; load mem[mem[.res1]] into A
  STA .bss + 5
  ; tmp_lo += prod_lo
  LDA .bss + 4
  ADD .bss + 2
  STA .bss + 4
  JPC asq_inc_hi
  JMP asq_add_hi
asq_inc_hi:
  LDA .bss + 3
  ADI 1
  STA .bss + 3
asq_add_hi:
  ; tmp_hi += prod_hi
  LDA .bss + 5
  ADD .bss + 3
  STA .bss + 5
  ; Store back
  LDA .arg2
  PHA
  LDA .bss + 4
  SAS
  LDA .res1
  PHA
  LDA .bss + 5
  SAS
  RET
