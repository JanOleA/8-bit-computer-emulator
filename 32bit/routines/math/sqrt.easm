;! name: SQRT
;! entry: sqrt
;! deps:
;! abi: all
;! bss: auto
;! align: 1

; Integer floor square root using subtraction of odd numbers.
; Inputs: Stack Pointer - 2 = n
; Returns values on stack after return (caller *must* pop) -> [ ..., floor(sqrt(n)), residual, gap_to_next_square ]
; floor(sqrt(n)) is also in A register on return

sqrt:
  PLA                     ; get return address from stack
  STA .bss + 3            ; move return address to bss + 3 for now

  PLA
  STA .bss          ; m
  ; m = n
  ; step = 1
  LDI 1
  STA .bss + 1      ; step
  ; x = 0
  LDI 0
  STA .bss + 2      ; x

sqrt_loop:
  ; while m >= step
  LDA .bss          ; m
  CMP .bss + 1      ; step
  JPC sqrt_ge       ; if m >= step
  JMP sqrt_done
sqrt_ge:
  ; m -= step
  LDA .bss
  SUB .bss + 1
  STA .bss
  ; x += 1
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  ; step += 2
  LDA .bss + 1
  ADI 2
  STA .bss + 1
  JMP sqrt_loop

sqrt_done:
  LDA .bss + 2
  PHA
  LDA .bss
  PHA
  LDA .bss + 1
  SUB .bss
  PHA
  LDA .bss + 3
  PHA
  RET

