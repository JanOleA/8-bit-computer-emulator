;! name: STRCOMPARE
;! entry: string_compare
;! deps:
;! abi: os
;! bss: auto
;! align: 4

; compare strings for equality
; takes pointers to strings as arguments
; result stored in A. 1 = equal, 0 = not equal
; bss     : temp char1

string_compare:
  PLA               ; pull return address into A
  MOVAB             ; move return address to B temporarily

  PLA
  STA .bss + 1
  PLA
  STA .bss + 2

  MOVBA             ; move return address back to A
  PHA               ; push return address back to stack

compare_loop:
  LPA .bss + 1      ; A <- mem[mem[.bss + 1]]
  ; store char1 in .bss
  STA .bss
  LPA .bss + 2      ; A <- mem[mem[.bss + 2]]
  CMP .bss          ; compare char1 to A (char2)
  JPZ equal
  JMP not_equal
equal:
  CPI 0             ; if equal and zero, we've reached the end
  JPZ done_equal
  LDA .bss + 1
  ADI 1
  STA .bss + 1
  LDA .bss + 2
  ADI 1
  STA .bss + 2
  JMP compare_loop
not_equal:
  LDI 0
  RET
done_equal:
  LDI 1
  RET