;! name: RANDINT
;! entry: randint
;! deps: multiply, divide
;! abi: all
;! bss: auto
;! align: 1

; --- 16/32 bit pseudo-randint in the range [0, argument) ---
; Uses a small LCG. For <32-bit A-regs uses (a=25173, c=13849).
; For 32-bit or larger, uses (a=1664525, c=1013904223).

; bss + 0 : upper limit of the range

randint:
  PLA
  MOVAB
  PLA
  STA .bss + 0        ; upper limit of range in .bss + 0
  MOVBA
  PHA
  ; Guard: if range == 0, return 0
  LDA .bss + 0
  CPI 0
  JPZ ri_zero
  ; Branch on available bits
  LDA .__sys_bits_avail
  CPI 32
  JPC ri_32

; --- 16-bit style LCG path ---
ri_16:
  LDA .__random_seed
  PHA
  LDI 25173
  PHA
  JSR @multiply
  ADI 13849
  STA .__arg1
  STA .__random_seed
  LDA .bss
  STA .__arg2
  JSR @divide
  LDA .__res2
  RET

; --- 32-bit LCG path (A-reg >= 32 bits) ---
ri_32:
  LDA .__random_seed
  PHA
  LDI 1664525
  PHA
  JSR @multiply
  ADI 1013904223
  STA .__arg1
  STA .__random_seed
  LDA .bss
  STA .__arg2
  JSR @divide
  LDA .__res2
  RET

ri_zero:
  LDI 0
  RET
