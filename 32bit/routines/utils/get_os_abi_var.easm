;! name: OSABI
;! entry: get_os_abi_var
;! deps: string_compare, parse_number, buffer_to_separator, echon
;! abi: os
;! bss: auto
;! align: 4

.separator = ","
; keep abi_vars in sync with compile_routines.py and emulator_os.txt
.abi_vars = "CHAR,2000,TEXTLOC,2001,ARG1,2002,ARG2,2003,RES1,2004,RES2,2005,RES3,2014,POW2,2006,NUM-DIGITS,2007,ASCII-START,2008,NO-INPUT,2009,WORK1,2010,WORK2,2011,WORK3,2012,WORK4,2013,INPUT-BUF,2122,INPUT-PTR,2202,CMD-LEN,2203,CMD-READY,2204,ARGV-BASE,2400,ARGV-BUF,2500,RANDOM-SEED,2600,INC-RANDOM-SEED,2601,BITS-AVAIL,2602,PROG-TABLE,3000"

; bss       : pointer to input string
; bss + 1   : current position in abi vars string

; --- Compare the string pointed to by .arg1 to OS ABI variables and return (in res1) the corresponding memory location, if it exists (otherwise null) ---

get_os_abi_var:
  LDA .arg1           ; .arg1 holds the pointer to the input string
  STA .bss
  LDI .abi_vars       ; store current position of abi var string in bss + 1
  STA .bss + 1
compare:
  JSR buf_to_sep
  LDA .res1
  STA .arg1           ; store pointer to buffered value in arg1
  LDA .bss
  STA .arg2           ; load pointer to input string from .bss into arg2
  JSR @string_compare
  LDA .res1
  CPI 1
  JPZ match
  ; get character at read_pointer
  LDA .bss + 1
  PHA
  LAS
  CPI 0                   ; if we reach null, end
  JPZ end_no_match
  JMP compare
match:
  JSR buf_to_sep          ; parse numeric token buffered by buffer_to_separator (pointer returned in .res1)
  LDA .res1
  STA .arg1
  JSR @parse_number
  LDA .res1
  RET
end_no_match:
  LDI 0
  STA .res1
  RET

; --- helper to buffer the next string to compare ---
buf_to_sep:          
  LDA .separator                ; Set separator byte (dereference first char of .separator)
  STA .arg2
  LDA .bss + 1                  ; Start from current pointer into abi var string
  STA .arg1                     ; Buffer token up to separator. Pointer to buffered string in res1; length -> .res2
  JSR @buffer_to_separator
  LDA .res2
  CPI 0                         ; compare with 0
  JPZ bts_done                  ; jump to end if so
  LDA .bss + 1
  ADD .res2                     ; Advance current pointer by token length
  STA .bss + 1
  LDA .bss + 1                  ; If current char is the separator, skip it as well; if null, do not
  PHA
  LAS
  ; Check if the current character is the separator
  CMP .arg2
  JPZ bts_skip_sep
  JMP bts_done
bts_skip_sep:
  LDA .bss + 1
  ADI 1
  STA .bss + 1
bts_done:
  RET
