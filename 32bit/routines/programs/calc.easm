;! name: CALC
;! entry: calc
;! deps: display_number, divide, mult, parse_number, newline, write_char, pow, sqrt
;! abi: os
;! bss: none
;! align: 20

; CALC <num1> <op> <num2>
; Computes num1 <op> num2 where op is one of + - * /
; Prints the result in decimal using display_number

calc:
  ; require at least 2 args
  LDI .argv_base
  PHA
  LAS
  CPI 2
  JPC cl_go
  RET

cl_go:
  ; parse first number -> work1
  LDI .argv_base
  ADI 1
  PHA
  LAS
  STA .arg1           ; arg1 = pointer to first number string
  JSR @parse_number
  LDA .res1
  STA .work1

  ; read operator char -> .char
  LDI .argv_base
  ADI 2
  PHA
  LAS
  STA .work2          ; pointer to operator token
  LDA .work2
  PHA
  LAS
  STA .char

  ; check if we have three arguments
  LDI .argv_base
  PHA
  LAS
  CPI 3
  JPZ get_second_num
  LDA .char
  JMP check_sqrt        ; if we don't have three numbers, immediately if we're trying to do a square root, skip other operators
get_second_num:
  ; parse second number -> work2
  LDI .argv_base
  ADI 3
  PHA
  LAS
  STA .arg1           ; arg1 = pointer to second number string
  JSR @parse_number
  LDA .res1
  STA .work2

  ; dispatch by operator
  LDA .char
  CPI 43              ; '+'
  JPZ do_add
  CPI 45              ; '-'
  JPZ do_sub
  CPI 42              ; '*'
  JPZ do_mul
  CPI 47              ; '/'
  JPZ do_div
  CPI 80              ; 'P'
  JPZ do_pow
check_sqrt:
  CPI 83              ; 'S'
  JPZ do_sqrt
  ; unknown op -> return
  RET

do_add:
  LDA .work1
  ADD .work2
  JMP do_print

do_sub:
  LDA .work1
  SUB .work2
  JMP do_print

do_sqrt:
  LDA .work1
  STA .arg1
  JSR @sqrt
  LDA .res1
  JMP do_print

do_pow:
  LDA .work1
  STA .arg1
  LDA .work2
  STA .arg2
  JSR @pow
  LDA .res1
  JMP do_print

do_mul:
  LDA .work1
  STA .arg1
  LDA .work2
  STA .arg2
  JSR @multiply
  JMP do_print

do_div:
  LDA .work1
  STA .arg1
  LDA .work2
  STA .arg2
  JSR @divide
  ; A holds quotient, .res2 holds remainder â€” print both
  ; Save quotient and remainder before display_number overwrites .res2
  STA .work4          ; save quotient
  LDA .res2
  STA .work3          ; save remainder
  LDA .work4          ; restore quotient
  ; print quotient
  STA .arg1
  JSR @display_number
  ; print " R "
  LDI 32
  STA .char
  JSR @write_char
  LDI 82              ; 'R'
  STA .char
  JSR @write_char
  LDI 32
  STA .char
  JSR @write_char
  ; print remainder
  LDA .work3
  STA .arg1
  JSR @display_number
  JSR @newline
  RET

do_print:
  STA .arg1
  JSR @display_number
  JSR @newline
  RET
