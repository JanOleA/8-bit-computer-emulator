;! name: CALC
;! entry: calc
;! deps: display_number, divide, mult, parse_number, newline, write_char, pow, sqrt, echon
;! abi: os
;! bss: none
;! align: 4

; CALC <num1> <op> <num2>
; Computes num1 <op> num2 where op is one of + - * /
; Prints the result in decimal using display_number

.residual_text = " Residual="
.distance_text = "Distance to next square="

calc:
  ; require at least 2 args
  LDA .argv_base
  CPI 2
  JPC cl_go
  RET

cl_go:
  ; parse first number -> work1
  LDA .argv_base + 1
  PHA
  JSR @parse_number
  STA .work1

  ; read operator char -> .char
  LDA .argv_base + 2
  STA .work2          ; pointer to operator token
  LPA .work2                ; load mem[mem[.work2]] into A
  STA .char

  ; check if we have three arguments
  LDA .argv_base
  CPI 3
  JPZ get_second_num
  LDA .char
  JMP check_sqrt        ; if we don't have three numbers, immediately if we're trying to do a square root, skip other operators
get_second_num:
  ; parse second number -> work2
  LDA .argv_base + 3
  PHA
  JSR @parse_number
  STA .work2

  ; dispatch by operator
  LDA .char
  CPI 43              ; '+'
  JPZ do_add
  CPI 45              ; '-'
  JPZ do_sub
  CPI 42              ; '*'
  JPZ do_mul
  CPI 47              ; '/'
  JPZ do_div
  CPI 80              ; 'P'
  JPZ do_pow
check_sqrt:
  CPI 83              ; 'S'
  JPZ do_sqrt
  ; unknown op -> return
  RET

do_add:
  LDA .work1
  ADD .work2
  JMP do_print

do_sub:
  LDA .work1
  SUB .work2
  JMP do_print

do_sqrt:
  LDA .work1
  PHA
  JSR @sqrt
  ; Returns values on stack after return (caller *must* pop) -> [ ..., floor(sqrt(n)), residual, gap_to_next_square ]
  PLA           ; gap
  STA .work3
  PLA           ; residual
  STA .work4
  PLA           ; result
  PHA
  JSR @display_number
  JSR @newline
  LDI .residual_text
  JSR print_no_newline
  ; print residual
  LDA .work4
  PHA
  JSR @display_number
  JSR @newline
  LDI .distance_text
  JSR print_no_newline
  ; print distance
  LDA .work3
  PHA
  JSR @display_number
  JSR @newline
  RET

do_pow:
  LDA .work1
  PHA
  LDA .work2
  PHA
  JSR @pow
  JMP do_print

do_mul:
  LDA .work1
  PHA
  LDA .work2
  PHA
  JSR @multiply
  JMP do_print

do_div:
  LDA .work1
  STA .arg1
  LDA .work2
  STA .arg2
  JSR @divide
  ; A holds quotient, .res2 holds remainder â€” print both
  ; Save quotient and remainder before display_number overwrites .res2
  STA .work4          ; save quotient
  LDA .res2
  STA .work3          ; save remainder
  LDA .work4          ; restore quotient
  ; print quotient
  PHA
  JSR @display_number
  ; print " R "
  LDI 32
  JSR @write_char
  LDI 82              ; 'R'
  JSR @write_char
  LDI 32
  JSR @write_char
  ; print remainder
  LDA .work3
  PHA
  JSR @display_number
  JSR @newline
  RET

do_print:
  PHA
  JSR @display_number
  JSR @newline
  RET

; -- print helpers, null terminated. Pointer to text must be in A register --
print_newline:
  STA .arg1
  LDI 0
  STA .num_digits
  STA .arg2
  JSR @echon
  RET

print_no_newline:
  STA .arg1
  LDI 0
  STA .num_digits
  LDI 1
  STA .arg2
  JSR @echon
  RET