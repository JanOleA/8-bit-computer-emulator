;! name: TED
;! entry: ted_start
;! deps: cat, parse_number, display_number, newline, toggle_display_enable, copy_mem, skip_line
;! abi: os
;! bss: auto
;! align: 4

; --- Text EDitor. First argument is memory address of start of text file. ---

; bss + 0       : Text file start
; bss + 1       : Cursor position in text file (calculated from cursor Y and cursor X)
; bss + 2       : Current length of text file (includes break and escape characters)
; bss + 3       : number of lines in text file
; bss + 4       : lines to skip before starting to draw content
; bss + 5       : read pointer from start of text
; bss + 6       : cursor Y, line we are editing from the top of current on-screen text
; bss + 7       : cursor X, position in current line we are editing
; bss + 8       : length of text on the current line we are editing
; bss + 9       : mode
; bss + 10      : input entered
; bss + 11      : entered value
; bss + 12      : no input

screen_width = 40
screen_height = 20

.mode_text = "Mode: "
.wc_text = "  wc="
.lc_text = "  lc="

ted_start:
  LDA .argv_base
  CPI 1
  JPC ted_go
  RET

ted_go:
  LDI 0
  STA .argv_base        ; reset argv_base so CAT can use .arg1 later
  STA .bss + 1
  STA .bss + 4
  STA .bss + 5
  STA .bss + 6
  STA .bss + 7
  LDA .argv_base + 1
  STA .arg1
  JSR @parse_number
  LDA .res1
  STA .bss + 0
  JSR count_lines
  JSR update_display
main_loop:
  JSR check_input
  LDA .bss + 10
  CPI 0
  JPZ set_no_input
  LDA .bss + 12
  CPI 1
  JPZ main_loop             ; if the key hasn't been released yet
  LDI 1
  STA .bss + 12             ; set no_input toggle
  LDA .bss + 11
  CPI 42
  JPZ handle_up
  CPI 53
  JPZ handle_down
  CPI 52
  JPZ handle_left
  CPI 54
  JPZ handle_right
  CPI 31
  JPZ handle_enter
  CPI 32
  JPZ handle_enter
  CPI 43
  JPZ handle_backspace
  CPI 44
  JPZ handle_ctrl
  ; -- insert ascii --
  ADD .ascii_start
  OUT
  PHA
  LAS
  STA .char
  JSR insert_character
  LDA .bss + 7
  ADI 1
  STA .bss + 7
  JSR count_lines
  LDI 1
  STA .res1
post_key_input:
  LDA .res1
  CPI 1
  JPZ refresh_screen
  JSR move_cursor_pointer   ; if we don't refresh the entire screen, do the cursor logic alone
  JMP main_loop
refresh_screen:
  JSR update_display
  JMP main_loop
  RET

set_no_input:
  LDI 0
  STA .bss + 12
  JMP main_loop

handle_ctrl:
  JSR clear_display
  RET

handle_enter:
  LDI 10                  ; newline literal
  STA .char
  JSR insert_character
  JSR count_lines
  LDI 0
  STA .bss + 7            ; cursor X resets to start of line
  LDA .bss + 4
  ADD .bss + 6            ; current global line index
  ADI 1                   ; look at the next line after the split
  CMP .bss + 3
  JPC he_set_refresh      ; no new line available (shouldn't happen, but guard)
  LDI .screen_height - 3
  CMP .bss + 6
  JPC he_add_y_check
  LDA .bss + 4
  ADI 1                   ; scroll window down when cursor already at bottom row
  STA .bss + 4
  JMP he_set_refresh
he_add_y_check:
  LDA .bss + 3
  SUB .bss + 4
  CMP .bss + 6
  JPZ he_increment_y
he_increment_y:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
he_set_refresh:
  LDI 1
  STA .res1
  JMP post_key_input

handle_backspace:
  LDA .bss + 7          ; check cursor X position first
  CPI 0
  JPZ hb_line_start
  LDA .bss + 1          ; cursor pointer in text buffer
  CPI 0
  JPZ post_key_input
  ADD .bss + 0          ; start of file
  STA .arg1             ; add them to get source
  SUI 1                 ; subtract one to get destination
  STA .arg2
  ; length is len(file) - pointer loc + 1 (add 1 for null terminator)
  LDA .bss + 2
  SUB .bss + 1
  ADI 1
  STA .num_digits
  JSR @copy_mem
  JSR count_lines
  LDI 1
  STA .res1
  LDA .bss + 7
  SUI 1
  STA .bss + 7
  JMP post_key_input

hb_line_start:
  LDA .bss + 1          ; if pointer is at absolute start, do nothing
  CPI 0
  JPZ post_key_input
  LDA .bss + 6
  CPI 0
  JPZ hb_ls_check_scroll
  SUI 1
  STA .bss + 6
  JMP hb_ls_after_move
hb_ls_check_scroll:
  LDA .bss + 4
  CPI 0
  JPZ post_key_input
  SUI 1
  STA .bss + 4
hb_ls_after_move:
  LDI 255
  STA .bss + 7
  JSR move_cursor_pointer
  LDA .bss + 0
  ADD .bss + 1
  PHA
  LAS
  STA .char             ; first break character
  CPI 0
  JPZ hb_no_break
  CPI 92                ; backslash escape?
  JPZ hb_break_escape
  CPI 10                ; literal newline
  JPZ hb_break_literal
  JMP hb_no_break
hb_break_literal:
  LDI 1
  STA .work1
  JMP hb_delete_merge
hb_break_escape:
  LDA .bss + 0
  ADD .bss + 1
  ADI 1
  PHA
  LAS
  CPI 78                ; 'N'
  JPZ hb_set_break_two
  LDI 1
  STA .work1
  JMP hb_delete_merge
hb_set_break_two:
  LDI 2
  STA .work1
  JMP hb_delete_merge
hb_no_break:
  LDI 1
  STA .res1             ; still refresh to reflect cursor move
  JMP post_key_input
hb_delete_merge:
  LDA .bss + 0
  ADD .bss + 1
  STA .arg2             ; destination = current cursor position
  LDA .work1
  CPI 2
  JPZ hb_set_src_plus2
hb_set_src_plus1:
  LDA .arg2
  ADI 1
  STA .arg1
  JMP hb_calc_tail
hb_set_src_plus2:
  LDA .arg2
  ADI 2
  STA .arg1
hb_calc_tail:
  LDA .bss + 2
  SUB .bss + 1
  SUB .work1
  ADI 1
  STA .num_digits
  JSR @copy_mem
  JSR count_lines
  LDI 1
  STA .res1
  JMP post_key_input

insert_character:   ; --- insert character in .char into current location pointed to by cursor buffer pointer
  LDA .bss + 0          ; start of file
  ADD .bss + 1          ; cursor pointer in text buffer
  STA .arg1             ; add them to get source
  ADI 1
  STA .arg2             ; destination is one higher
  ; length is len(file) - pointer loc + 1 (add 1 for null terminator)
  LDA .bss + 2
  SUB .bss + 1
  ADI 1
  STA .num_digits
  JSR @copy_mem
  LDA .bss + 0
  ADD .bss + 1
  PHA                   ; push memory location of insert to stack
  LDA .char
  SAS                   ; pop memory location from stack to store .char
  RET

handle_left:
  LDI 0
  STA .res1
  LDA .bss + 7
  CPI 0
  JPZ post_key_input
  SUI 1
  STA .bss + 7
  JMP post_key_input

handle_right:
  LDI 0
  STA .res1
  LDA .bss + 7
  ADI 1
  STA .bss + 7          ; clamping is handled by move_cursor_pointer
  JMP post_key_input

handle_up:
  LDI 0
  STA .res1
  LDA .bss + 6
  CPI 1
  JPC sub_y
  LDA .bss + 4                      ; handle shifting buffer up one line if .bss + 4 >= 1
  CPI 1
  JPC sub_lineskip
  JMP post_key_input                ; if both bss+4 and bss+7 are 0, return without doing anything
sub_lineskip:
  SUI 1
  STA .bss + 4
  LDI 1
  STA .res1                         ; res1 is 1 -> redraw screen
  JMP post_key_input
sub_y:
  SUI 1
  STA .bss + 6
  JMP post_key_input

handle_down:
  LDI 0
  STA .res1
  LDA .bss + 4
  ADD .bss + 6                      ; line number we are on in the actual file
  ADI 1
  CMP .bss + 3                      ; compare to total number in file
  JPC post_key_input                ; do nothing if we're maxed

  LDI .screen_height - 3
  CMP .bss + 6
  JPC add_y_check                   ; if 17 >= Y (aka Y < 18) (assumes screen_height = 20)
  ; Y >= 19 (assumes screen_height = 20)
  LDA .bss + 4
  ADI 1                             ; increment skipped lines
  STA .bss + 4
  LDI 1
  STA .res1
  JMP post_key_input
add_y_check:
  LDA .bss + 3                      ; number of lines in text file
  SUB .bss + 4                      ; skipped lines
  ; A = lines from top of screen to end of text
  CMP .bss + 6
  JPZ add_y                         ; if num_lines >= Y, allow moving down
add_y:
  LDA .bss + 6
  ADI 1
  STA .bss + 6
  JMP post_key_input

update_display:
  LDI 0
  STA .bss + 1          ; cursor buffer pointer
  STA .bss + 5          ; read buffer pointer
  LDA .bss + 4
  STA .work1
  JSR clear_display
skip_lines_loop:
  LDA .work1
  CPI 0
  JPZ end_skip_lines    ; branch away if skip count is at 0
  LDA .bss + 0
  ADD .bss + 5          ; bss[0] + bss[5] = current location
  STA .arg1
  JSR @skip_line
  LDA .bss + 5
  ADD .res2             ; add N-characters that were skipped to pointer
  STA .bss + 5
  LDA .work1
  SUI 1                 ; subtract one from count
  STA .work1
  JMP skip_lines_loop
end_skip_lines:
  LDA .bss + 5
  ADD .bss + 0
  STA .arg1
  LDI 20
  STA .arg2
  LDI 1
  STA .res1
  JSR @cat
skip_to_bottom_row_loop:
  LDA .res2
  CPI .screen_height - 1
  JPC end_bottom_row_loop
  JSR @newline
  ADI 1
  STA .res2
  JMP skip_to_bottom_row_loop
end_bottom_row_loop:
  LDI .mode_text
  JSR print_no_newline
  LDA .bss + 9
  STA .arg1
  JSR @display_number
  LDI .wc_text
  JSR print_no_newline
  LDA .bss + 2
  STA .arg1
  JSR @display_number
  LDI .lc_text
  JSR print_no_newline
  LDA .bss + 3
  STA .arg1
  JSR @display_number
move_cursor_pointer:    ; -- move the pointer for where the cursor is in the current text buffer --
  DIS 2                 ; set cursor to top left
  JSR @toggle_display_enable
  LDA .bss + 5
  STA .bss + 1          ; set cursor pointer to be the same as read buffer
  LDA .bss + 6
  STA .work1
mcp_loop:
  LDA .work1
  CPI 0
  JPZ end_mcp           ; branch away if Y count is at 0
  LDA .bss + 0
  ADD .bss + 1          ; cursor position in buffer
  STA .arg1
  JSR @skip_line
  LDA .bss + 1
  ADD .res2             ; add N-characters that were skipped to pointer
  STA .bss + 1
  LDA .work1
  SUI 1                 ; subtract one from count
  STA .work1
  DIS 20
  JSR @toggle_display_enable
  JMP mcp_loop
end_mcp:
  LDA .bss + 0
  ADD .bss + 1
  STA .arg1             ; use skip line to get the length of the line the cursor is on
  JSR @skip_line
  LDA .res1             ; length without break/escape
  STA .bss + 8
  CMP .bss + 7          ; if len(line) >= X
  JPC no_clamp_x        ; skip clamp
  STA .bss + 7          ; else, clamp to length of line
no_clamp_x:
  LDA .bss + 7
  STA .work1
  ADD .bss + 1
  STA .bss + 1          ; move cursor buffer pointer by same x
mcr_loop:               ; move cursor right loop
  LDA .work1
  CPI 0
  JPZ end_mcr_loop
  SUI 1
  STA .work1
  DIS 17
  JSR @toggle_display_enable
  JMP mcr_loop
end_mcr_loop:
  RET

check_input:
  KEI
  PHA
  CPI 128
  JPC input_entered     ; handle input if keyboard register is >= 128, since the 128 bit is signal bit
  PLA
  LDI 0
  STA .bss + 10
  RET
input_entered:
  PLA
  SUI 128
  STA .bss + 11
  LDI 1
  STA .bss + 10
  RET

clear_display:
  DIS 1             ; 0000 0001 - clear display
  JSR @toggle_display_enable
  RET

count_lines:
  LDI 0
  STA .bss + 2
  STA .bss + 3
  STA .bss + 5
cl_loop:
  LDA .bss + 0
  ADD .bss + 5
  STA .arg1
  JSR @skip_line
  LDA .res2
  CPI 0
  JPZ count_end
  LDA .bss + 3
  ADI 1             ; increase line count
  STA .bss + 3
  LDA .bss + 2
  ADD .res2         ; add current number of bytes to bss + 2
  STA .bss + 2
  STA .bss + 5      ; pointer will be the same as text length while we are counting
  JMP cl_loop  
count_end:
  RET

; -- print helpers, null terminated. Pointer to text must be in A register --
print_newline:
  STA .arg1
  LDI 0
  STA .num_digits
  STA .arg2
  JSR @echon
  RET

print_no_newline:
  STA .arg1
  LDI 0
  STA .num_digits
  LDI 1
  STA .arg2
  JSR @echon
  RET
