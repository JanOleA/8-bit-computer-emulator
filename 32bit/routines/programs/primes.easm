;! name: PRIMES
;! entry: main
;! deps: divide, display_number, newline
;! abi: all
;! bss: auto
;! align: 4
;! callable: yes

; bss + 0 = check_value
; bss + 1 = loop_index
; bss + 2 = half_check
; bss + 3 = limit

main:
  

begin:
  ; print 2
  LDI 2
  PHA
  JSR @display_number
  JSR @newline
  ; start from 3
  LDI 3
  STA .bss
main_loop:
  LDA .bss
  CPI 301
  JPC done
  JSR check_prime_os
  LDA .bss
  ADI 2
  STA .bss
  JMP main_loop
done:
  RET

; check if .bss is prime; prints it if it is
check_prime_os:
  LDA .bss
  RSA
  STA .bss + 2
  LDI 3
  STA .bss + 1
prime_loop_os:
  LDA .bss + 1
  CMP .bss + 2
  JPC prime_os
  ; divide check_value by loop_index
  LDA .bss
  STA .arg1
  LDA .bss + 1
  STA .arg2
  JSR @divide
  LDA .res2
  CPI 0
  JPZ not_prime_os
  LDA .bss + 1
  ADI 2
  STA .bss + 1
  JMP prime_loop_os
not_prime_os:
  RET
prime_os:
  ; print the prime then newline
  LDA .bss
  PHA
  JSR @display_number
  JSR @newline
  RET
