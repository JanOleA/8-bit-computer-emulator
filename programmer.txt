pressing = 255            ; memory location for storing whatever number the user pressed last
multiplicand = 254        ; multiplicand for the multiply routine
multiplier = 253          ; multiplier in the multiply routine (how many times .multiplicand is added up)
product = 252             ; product of the multiplication, or quotient for the division
userval = 251             ; the entire inputted number (i.e., if the user presses "2" and then "3", it will be "23")
wrt_address = 250         ; where in memory to write the new instructions/operands
temp = 249                ;
min_ad = 248              ; do not allow programmer to go equal or below this address

start:
  LDI 128
  STA .wrt_address
  LDI 127
  STA .min_ad
  JMP end_inputs
check_input:
  KEI               ; load value from input register
  ADI 128           ; add 128 to the value
  JPC input         ; if result > 255, jump to input handling
  JMP check_input   ; otherwise, continue check_input loop
input:
  ADI 192           ; add 192 to the value
  JPC handle_add_div; if carry, add or div button was pressed
  ADI 32            ; if not, add 32 to the value
  JPC handle_sub    ; if carry, sub button was pressed
  ADI 16            ; if not, add 16 to the value
  JPC handle_mul    ; if carry, mul button was pressed
  ADI 16            ; if not, add 16 to clear top 4 bits

  STA .pressing
  LDI 10            ; the current input value is stored in 250, must multiply by ten to insert new number at end
  STA .multiplier
  LDA .userval      ; load the current userval to multiply it by 10
  STA .multiplicand
  JSR multiply      ; multiply .multiplicand with .multiplier
  ADD .pressing     ; add the currently pressed number to the result of the multiplication
  OUT               ; display the value
  STA .userval      ; store the result to .userval

chk_no_inpt:        ; loop for checking whether no input is pressed
  KEI               ; load value from input register
  ADI 0             ; add zero to it
  JPZ check_input   ; jump to check input, if the result is zero
  JMP chk_no_inpt   ; else, jump back to checking if there is no input

multiply:           ; multiplies .multiplicand with .multiplier, stores it in .product
  LDA .multiplicand
  STA .product      ; store the multiplicand in .product, essentially doing the first addition
mult_loop:
  LDA .multiplier
  SUI 1             ; subtract 1 from multiplier
  JPZ mult_end      ; if result is zero, end multiply
  STA .multiplier
  LDA .product
  ADD .multiplicand
  STA .product
  JMP mult_loop     ; continue multiply loop
mult_end:
  LDA .product
  RET               ; return

handle_add_div:
  JPZ handle_add
  JMP handle_div

handle_add:
  LDA .wrt_address  ; load the write address
  PHA               ; push it to the stack
  ADI 1             ; increase the write address
  STA .wrt_address  ; store it again
  OUT               ; output the next memory address we are writing to
  LDA .userval      ; load the input value
  SAS               ; store A in memory address from stack
  LDI 0
  STA .userval
  JMP chk_no_inpt

handle_sub:
  LDA .wrt_address
  SUI 1
  CMP .min_ad
  JPZ end_inputs
  STA .wrt_address
  JMP end_inputs

handle_mul:
  JMP #128          ; jump to memory address 128

handle_div:
  LDI 128
  STA .wrt_address
  JMP end_inputs

end_inputs:
  LDA .wrt_address
  OUT
  LDI 0
  STA .userval
  JMP chk_no_inpt