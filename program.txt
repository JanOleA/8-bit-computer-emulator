x = 255       ; memory address for .x
y = 254       ; memory address for .y

start:
  LDI 1       ; load 1 into A
  STA .x      ; store 1 in .x
  STA .y      ; store 1 in .y
  OUT         ; display 1
loop:
  JSR adds    ; jump to the "adds" subroutine
  STA .x      ; store A in .x
  JSR adds    ; jump to the "adds" subroutine
  STA .y      ; store A in .y
  JMP loop    ; jump to start of loop
adds:         ; adds the values in .x and .y and puts them in the A register
  LDA .x
  ADD .y
  JPC ex_adds ; if .x + .y causes a carry (i.e. .x + .y > 255, jump to ex_adds)
  OUT         ; output the result
  RET         ; return to where the subroutine was called from
ex_adds:
  PLA         ; pull the value from stack into A to dec. stack pointer
  JMP start   ; jump to start